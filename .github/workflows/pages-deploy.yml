# GitHub Pages Deployment Workflow for Multi-Section Docsify Documentation
#
# Purpose:
# This workflow builds and deploys Docsify documentation with enhanced multi-section navigation to GitHub Pages.
# It supports the full documentation architecture including all content folders processed by Generate-DocsSidebar.ps1
# and implements dynamic validation for content-aware deployment verification.
#
# Enhanced Functionality:
# - Triggers via workflow_call (manually or from ci-cd.yml)
# - Sets up Node.js environment for Docsify CLI
# - Comprehensive content copying for all documentation folders (docs/, src/, blueprints/, praxisworx/, .github/, copilot/)
# - Section-based navigation architecture support with docs/_parts/ structure
# - Dynamic sidebar currency validation (fails deployment if outdated)
# - Content-aware validation for special file types (.prompt.md, .chatmode.md, .instructions.md)
# - Post-deployment verification with site accessibility and path testing
# - Generates GitHub Pages-specific URL configuration for token replacement
# - Builds Docsify documentation with all assets and plugins
# - Deploys built documentation to GitHub Pages with comprehensive validation reporting
#
# Parameters:
# - source_branch: Branch to build documentation from
# - deploy_environment: Environment to deploy to (e.g., production, staging)
#
# Output Variables:
# - page_url: URL of the deployed GitHub Pages site
#
# Usage Examples:
# ```yaml
# # Called from another workflow:
# jobs:
#   deploy-docs:
#     uses: ./.github/workflows/pages-deploy.yml
#     with:
#       source_branch: 'main'
#       deploy_environment: 'github-pages'
#
# # Direct call with custom branch:
# jobs:
#   deploy-docs:
#     uses: ./.github/workflows/pages-deploy.yml
#     with:
#       source_branch: 'feature/improved-docs'
#       deploy_environment: 'staging'
# ```
#
# Enhanced Features:
# - Multi-section documentation architecture with comprehensive folder coverage
# - Dynamic content-aware validation that scales with documentation structure changes
# - Section-based navigation support (docs/_parts/) for docsify multi-section architecture
# - Sidebar currency validation prevents deployment of outdated navigation
# - Post-deployment verification ensures site accessibility and documentation paths
# - Comprehensive validation reporting for troubleshooting deployment issues
# - Docsify CLI build process with Node.js caching
# - Dynamic URL token replacement for GitHub Pages environment
# - Comprehensive asset management (CSS, JS, images, plugins)
# - Build validation and error reporting
# - .nojekyll file generation to prevent Jekyll processing
#
# Content Architecture Support:
# - docs/: Core documentation content with section-specific sidebars
# - src/: Infrastructure as Code components and modules
# - blueprints/: Deployment blueprint configurations
# - praxisworx/: Training and learning content
# - .github/: Workflow and repository automation documentation
# - copilot/: AI assistant instructions and prompts
#
# This workflow follows GitHub's best practices for Pages deployments, uses the
# recommended actions for setting up and deploying to GitHub Pages, and implements
# robust validation to ensure comprehensive documentation coverage.
---
name: Deploy to GitHub Pages

on: # yamllint disable-line rule:truthy
  workflow_call:      # Make this a reusable workflow
    inputs:
      source_branch:
        description: 'Branch to build documentation from'
        required: true
        type: string
      deploy_environment:
        description: 'Environment to deploy to (e.g., production, staging)'
        required: true
        type: string
    outputs:
      page_url:
        description: "URL of the deployed GitHub Pages site"
        value: ${{ jobs.deploy.outputs.page_url }}

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          fetch-depth: 0
          ref: ${{ inputs.source_branch }}

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Docsify CLI
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ~/.npm
          key: ${{ runner.os }}-docsify-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-docsify-

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"

      - name: Generate GitHub Pages URL configuration
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          SOURCE_BRANCH: ${{ inputs.source_branch }}
        run: |
          echo "üîß Generating GitHub Pages URL configuration..."
          if ! pwsh -File scripts/Generate-GitHubPagesConfig.ps1; then
            echo "‚ùå Failed to generate URL configuration"
            echo "Debug information:"
            echo "Repository: $GITHUB_REPOSITORY"
            echo "Owner: $GITHUB_REPOSITORY_OWNER"
            echo "Name: $GITHUB_REPOSITORY_NAME"
            echo "Branch: $SOURCE_BRANCH"
            exit 1
          fi
          echo "‚úÖ URL configuration generated successfully"

      - name: Validate sidebar is current
        run: |
          echo "üîç Validating sidebar is current with documentation structure..."

          # Store original sidebar content
          original_sidebar=""
          if [ -f "docs/_sidebar.md" ]; then
            original_sidebar=$(cat docs/_sidebar.md)
          fi

          # Generate sidebar temporarily to check if it's current
          echo "üìù Generating temporary sidebar for validation..."
          if ! pwsh -File ./scripts/Generate-DocsSidebar.ps1; then
            echo "‚ùå Failed to generate sidebar for validation"
            exit 1
          fi

          # Get the newly generated content
          new_sidebar=""
          if [ -f "docs/_sidebar.md" ]; then
            new_sidebar=$(cat docs/_sidebar.md)
          fi

          # Compare content excluding timestamp differences
          original_content=$(echo "$original_sidebar" | sed 's/Generated on:.*//')
          new_content=$(echo "$new_sidebar" | sed 's/Generated on:.*//')

          if [ "$original_content" != "$new_content" ]; then
            echo "‚ùå Sidebar is outdated and needs regeneration!"
            echo "The sidebar doesn't match the current documentation structure."
            echo "Please run the following command locally and commit the changes:"
            echo "  pwsh -File ./scripts/Generate-DocsSidebar.ps1"
            exit 1
          else
            echo "‚úÖ Sidebar is current with documentation structure"
          fi

          # Restore original sidebar if it was temporarily modified
          if [ -n "$original_sidebar" ]; then
            echo "$original_sidebar" > docs/_sidebar.md
          fi

      - name: Build Docsify documentation
        run: |
          set -e  # Exit on any error

          echo "üèóÔ∏è  Starting enhanced Docsify documentation build..."

          # Show build environment info
          echo "üìä Build Environment:"
          echo "   - Working directory: $(pwd)"
          echo "   - Available space: $(df -h . | tail -1 | awk '{print $4}')"
          echo "   - Memory: $(free -h | grep '^Mem:' | awk '{print $7}' || echo 'N/A')"

          # Create the build directory
          echo "üìÅ Creating build directory..."
          if ! mkdir -p ./_site; then
            echo "‚ùå Failed to create build directory"
            exit 1
          fi

          # Copy main Docsify files with progress reporting
          echo "üìã Copying main Docsify files..."
          files_to_copy=("index.html" "docsify-url-config.js")
          for file in "${files_to_copy[@]}"; do
            if [ -f "$file" ]; then
              if cp "$file" ./_site/; then
                file_size=$(ls -lh "$file" | awk '{print $5}')
                echo "   ‚úÖ $file ($file_size)"
              else
                echo "   ‚ùå Failed to copy $file"
                exit 1
              fi
            else
              echo "   ‚ö†Ô∏è  $file not found"
            fi
          done

          # Copy all documentation folders with enhanced progress reporting
          echo "ÔøΩ Copying documentation folders with enhanced monitoring..."

          doc_folders=("docs" "src" "blueprints" "praxisworx" ".github" "copilot")
          total_folders=${#doc_folders[@]}
          current_folder=0

          for folder in "${doc_folders[@]}"; do
            ((current_folder++))
            echo "üìÇ Processing folder $current_folder/$total_folders: $folder"

            if [ -d "$folder" ]; then
              # Get folder size and file count before copying
              folder_size=$(du -sh "$folder" | cut -f1)
              file_count=$(find "$folder" -type f | wc -l)
              md_count=$(find "$folder" -name "*.md" | wc -l)

              echo "   üìä $folder stats: $folder_size, $file_count files ($md_count markdown)"

              # Copy with progress feedback
              if cp -r "$folder" ./_site/; then
                echo "   ‚úÖ $folder copied successfully"
              else
                echo "   ‚ö†Ô∏è  Failed to copy $folder directory"
                # For critical folders, this should be an error
                if [ "$folder" = "docs" ]; then
                  echo "   ‚ùå Critical folder $folder failed to copy"
                  exit 1
                fi
              fi
            else
              echo "   ‚ÑπÔ∏è  $folder directory not found (skipping)"
            fi
          done

          # Copy assets if they exist
          echo "üé® Copying assets..."
          if [ -d "assets" ]; then
            if cp -r assets ./_site/; then
              echo "‚úÖ Root assets directory copied"
            else
              echo "‚ö†Ô∏è  Failed to copy root assets directory"
            fi
          else
            echo "‚ÑπÔ∏è  No root assets directory found"
          fi

          # Copy any root-level markdown files that might be referenced
          echo "üìÑ Copying root markdown files..."
          find . -maxdepth 1 -name "*.md" -exec cp {} ./_site/ \; 2>/dev/null || true

          # Copy any additional static files Docsify might need
          echo "üìÅ Copying additional static files..."
          for file in robots.txt sitemap.xml favicon.ico .nojekyll; do
            if [ -f "$file" ]; then
              if cp "$file" ./_site/; then
                echo "‚úÖ Copied $file"
              else
                echo "‚ö†Ô∏è  Failed to copy $file"
              fi
            fi
          done

          # Create .nojekyll file to prevent GitHub Pages from trying to process with Jekyll
          if ! touch ./_site/.nojekyll; then
            echo "‚ùå Failed to create .nojekyll file"
            exit 1
          fi
          echo "‚úÖ Created .nojekyll file"

          # Verify the build
          echo "üîç Build verification:"
          echo "Build output directory structure:"
          if ! find ./_site -type f | head -20; then
            echo "‚ùå Failed to list build output files"
            exit 1
          fi

          echo ""
          echo "üìä Build statistics:"
          total_files=$(find ./_site -type f | wc -l)
          total_size=$(du -sh ./_site | cut -f1)
          echo "Total files: $total_files"
          echo "Total size: $total_size"

          if [ "$total_files" -lt 10 ]; then
            echo "‚ùå Build output contains suspiciously few files ($total_files)"
            exit 1
          fi

          # Check critical files
          echo "üîß Critical files check:"
          for file in index.html docsify-url-config.js docs/_sidebar.md; do
            if [ -f "./_site/$file" ]; then
              echo "‚úÖ $file found"
            else
              echo "‚ùå $file missing"
              exit 1
            fi
          done

          # Verify section-based navigation architecture
          echo "üìã Section-based navigation verification:"
          if [ -d "./_site/docs/_parts" ]; then
            echo "‚úÖ Section navigation directory (docs/_parts) found"

            # Check for section-specific sidebars
            section_sidebars=("docs-sidebar.md" "praxisworx-sidebar.md" "blueprints-sidebar.md" "infrastructure-sidebar.md")
            for sidebar in "${section_sidebars[@]}"; do
              if [ -f "./_site/docs/_parts/$sidebar" ]; then
                echo "‚úÖ Section sidebar found: $sidebar"
              else
                echo "‚ö†Ô∏è  Section sidebar missing: $sidebar"
              fi
            done
          else
            echo "‚ö†Ô∏è  Section navigation directory (docs/_parts) not found"
          fi

          # Verify all documentation folders are copied
          echo "üìÅ Documentation folders verification:"
          doc_folders=("docs" "src" "blueprints" "praxisworx" ".github" "copilot")
          for folder in "${doc_folders[@]}"; do
            if [ -d "./_site/$folder" ]; then
              file_count=$(find "./_site/$folder" -name "*.md" | wc -l)
              echo "‚úÖ $folder directory found ($file_count markdown files)"
            else
              echo "‚ÑπÔ∏è  $folder directory not found (may not exist in source)"
            fi
          done

          # Verify assets are copied
          echo "üé® Asset verification:"
          if [ -d "./_site/docs/assets" ]; then
            echo "‚úÖ docs/assets directory found"
            echo "üìÅ Assets found: $(ls ./_site/docs/assets/ | tr '\n' ' ')"
          else
            echo "‚ö†Ô∏è  No docs/assets directory found"
          fi

          # Verify Docsify configuration
          echo "‚öôÔ∏è  Docsify configuration check:"
          if grep -q "window.\$docsify" ./_site/index.html; then
            echo "‚úÖ Docsify configuration found in index.html"
          else
            echo "‚ùå Docsify configuration missing from index.html"
            exit 1
          fi

          # Verify URL token replacement setup
          echo "üîó URL configuration check:"
          if grep -q "window.EDGE_AI_URL_CONFIG" ./_site/docsify-url-config.js; then
            echo "‚úÖ URL configuration found"
          else
            echo "‚ùå URL configuration missing"
            exit 1
          fi

          echo "üéâ Docsify build completed successfully"

      - name: Validate build output
        run: |
          echo "üîç Running build validation tests..."

          # Test 1: Verify HTML structure
          echo "üìÑ Testing HTML structure..."
          if ! grep -q "<html" ./_site/index.html; then
            echo "‚ùå Invalid HTML structure in index.html"
            exit 1
          fi
          echo "‚úÖ HTML structure is valid"

          # Test 2: Check for broken internal links in markdown
          echo "üîó Checking for potential internal link issues..."
          broken_links=0

          # Check for common broken link patterns in docs
          if find ./_site/docs -name "*.md" -exec grep -l "\](.*\.md)" {} \; | head -5; then
            echo "‚ö†Ô∏è  Found relative markdown links that may need attention"
            echo "‚ÑπÔ∏è  Note: These will be processed by Docsify's router"
          fi

          # Test 3: Verify critical Docsify plugins are referenced
          echo "üîå Checking plugin references..."
          plugins_found=0
          for plugin in "docsify@4" "search.min.js" "docsify-pagination" "docsify-copy-code"; do
            if grep -q "$plugin" ./_site/index.html; then
              echo "‚úÖ Plugin $plugin found"
              ((plugins_found++))
            else
              echo "‚ö†Ô∏è  Plugin $plugin not found"
            fi
          done

          if [ $plugins_found -ge 3 ]; then
            echo "‚úÖ Essential plugins are properly referenced"
          else
            echo "‚ö†Ô∏è  Some plugins may be missing, but build can continue"
          fi

          # Test 4: Dynamic sidebar validation based on actual content
          echo "üìö Dynamic sidebar validation..."
          if [ -f "./_site/docs/_sidebar.md" ]; then
            # Count total sections in sidebar (lines starting with '- [' or just '- ')
            sidebar_sections=$(grep -c "^- " "./_site/docs/_sidebar.md" || echo "0")
            echo "‚úÖ Sidebar found with $sidebar_sections navigation sections"

            # Verify sidebar contains content from all copied folders
            content_areas_found=0

            # Check for docs content
            if grep -q "docs/" "./_site/docs/_sidebar.md"; then
              echo "‚úÖ Docs content found in sidebar"
              ((content_areas_found++))
            fi

            # Check for GitHub resources (if .github was copied)
            if [ -d "./_site/.github" ] && grep -q -i "github\|copilot.*resources\|prompts" "./_site/docs/_sidebar.md"; then
              echo "‚úÖ GitHub resources content found in sidebar"
              ((content_areas_found++))
            fi

            # Check for infrastructure content (if src was copied)
            if [ -d "./_site/src" ] && grep -q -i "infrastructure\|terraform\|bicep" "./_site/docs/_sidebar.md"; then
              echo "‚úÖ Infrastructure content found in sidebar"
              ((content_areas_found++))
            fi

            # Check for blueprints content (if blueprints was copied)
            if [ -d "./_site/blueprints" ] && grep -q -i "blueprint" "./_site/docs/_sidebar.md"; then
              echo "‚úÖ Blueprints content found in sidebar"
              ((content_areas_found++))
            fi

            # Check for praxisworx content (if praxisworx was copied)
            if [ -d "./_site/praxisworx" ] && grep -q -i "praxisworx\|learning" "./_site/docs/_sidebar.md"; then
              echo "‚úÖ PraxisWorx content found in sidebar"
              ((content_areas_found++))
            fi

            echo "üìä Content areas validated: $content_areas_found"

            # Require at least basic content structure
            if [ "$sidebar_sections" -ge 5 ] && [ "$content_areas_found" -ge 2 ]; then
              echo "‚úÖ Sidebar validation passed: adequate content structure"
            else
              echo "‚ö†Ô∏è  Sidebar validation warning: limited content structure detected"
              echo "    Sections: $sidebar_sections, Content areas: $content_areas_found"
            fi
          else
            echo "‚ùå Sidebar file missing"
            exit 1
          fi

          # Test 5: Validate content accessibility across all folders
          echo "üîó Content accessibility validation..."
          total_md_files=$(find ./_site -name "*.md" | wc -l)
          echo "üìÑ Total markdown files deployed: $total_md_files"

          # Verify special file types are accessible
          special_files_found=0
          if find ./_site -name "*.prompt.md" | head -1 > /dev/null 2>&1; then
            prompt_count=$(find ./_site -name "*.prompt.md" | wc -l)
            echo "‚úÖ Prompt files found: $prompt_count"
            ((special_files_found++))
          fi

          if find ./_site -name "*.chatmode.md" | head -1 > /dev/null 2>&1; then
            chatmode_count=$(find ./_site -name "*.chatmode.md" | wc -l)
            echo "‚úÖ Chatmode files found: $chatmode_count"
            ((special_files_found++))
          fi

          if find ./_site -name "*.instructions.md" | head -1 > /dev/null 2>&1; then
            instructions_count=$(find ./_site -name "*.instructions.md" | wc -l)
            echo "‚úÖ Instructions files found: $instructions_count"
            ((special_files_found++))
          fi

          echo "üéØ Special file types accessible: $special_files_found"

          # Comprehensive deployment validation report
          echo ""
          echo "üìã === COMPREHENSIVE DEPLOYMENT VALIDATION REPORT ==="
          echo "üèóÔ∏è  Build Summary:"
          echo "   - Total files deployed: $total_files"
          echo "   - Total markdown files: $total_md_files"
          echo "   - Sidebar sections: $sidebar_sections"
          echo "   - Content areas validated: $content_areas_found"
          echo "   - Special file types: $special_files_found"
          echo ""
          echo "üìÅ Folder Status:"
          for folder in docs src blueprints praxisworx .github copilot; do
            if [ -d "./_site/$folder" ]; then
              folder_md_count=$(find "./_site/$folder" -name "*.md" | wc -l)
              echo "   ‚úÖ $folder: $folder_md_count files"
            else
              echo "   ‚ö™ $folder: not present"
            fi
          done
          echo ""
          echo "üéØ Navigation Architecture:"
          if [ -d "./_site/docs/_parts" ]; then
            parts_count=$(ls "./_site/docs/_parts"/*.md 2>/dev/null | wc -l)
            echo "   ‚úÖ Section-based navigation: $parts_count section sidebars"
          else
            echo "   ‚ö™ Section-based navigation: not detected"
          fi
          echo ""
          echo "üéâ Deployment validation completed successfully!"

          echo "üéØ Build validation completed successfully"

      - name: Generate artifact hashes for SLSA attestation
        id: hash
        run: |
          echo "üîí Generating artifact hashes for SLSA attestation..."

          # Create a tarball of the built site for consistent hashing
          tar -czf site-artifact.tar.gz -C ./_site .

          # Generate SHA256 hash
          HASH=$(sha256sum site-artifact.tar.gz | cut -d' ' -f1)

          # Generate base64 encoded subjects in the format required by SLSA
          # Format: "name":"sha256:hash"
          SUBJECTS_JSON='{"site-artifact.tar.gz":"sha256:'$HASH'"}'
          SUBJECTS_B64=$(echo -n "$SUBJECTS_JSON" | base64 -w0)

          echo "hashes=$SUBJECTS_B64" >> "$GITHUB_OUTPUT"

          echo "‚úÖ Generated artifact hash: $HASH"
          echo "üìÑ Subject: site-artifact.tar.gz"
          echo "üîê SLSA subjects: $SUBJECTS_JSON"

      - name: Upload build artifact
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
        with:
          name: documentation-build-${{ github.run_number }}
          path: site-artifact.tar.gz
          retention-days: 30

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa
        with:
          # Adjust this path to match your documentation output directory
          path: './_site'

  # SLSA attestation for documentation artifacts
  slsa-attestation:
    name: SLSA Attestation
    needs: build
    permissions:
      id-token: write
      contents: read
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: ${{ inputs.deploy_environment }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, slsa-attestation]
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e

      - name: Verify deployment
        run: |
          echo "üîç Verifying GitHub Pages deployment..."

          # Get the deployment URL
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          echo "üìç Deployment URL: $SITE_URL"

          # Wait a moment for deployment to be fully active
          echo "‚è≥ Waiting for deployment to be fully active..."
          sleep 30

          # Test basic site accessibility
          echo "üåê Testing site accessibility..."
          if curl -s -f "$SITE_URL" > /dev/null; then
            echo "‚úÖ Site is accessible"
          else
            echo "‚ö†Ô∏è  Site accessibility check failed (may need more time)"
          fi

          # Test specific documentation paths if site is accessible
          if curl -s -f "$SITE_URL" > /dev/null; then
            echo "üîó Testing documentation paths..."

            # Test main documentation structure
            paths_to_test=("" "/#/docs/" "/#/docs/_sidebar")

            for path in "${paths_to_test[@]}"; do
              test_url="${SITE_URL}${path}"
              if curl -s -f "$test_url" > /dev/null; then
                echo "   ‚úÖ $path accessible"
              else
                echo "   ‚ö†Ô∏è  $path may not be accessible"
              fi
            done

            echo "üéØ Deployment verification completed"
            echo "üìã Site URL: $SITE_URL"
            echo "üìã Documentation should be accessible at: ${SITE_URL}/#/"
          else
            echo "‚ÑπÔ∏è  Skipping path tests due to accessibility issues"
            echo "üìã Site URL: $SITE_URL (may need additional time to be fully active)"
          fi
