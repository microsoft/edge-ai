# Documentation Automation Workflow
#
# Purpose:
# Automates documentation generation, validation, and deployment processes including
# frontmatter validation, sidebar generation, and GitHub Pages deployment.
#
# Functionality:
# - Validates YAML frontmatter in documentation files for consistency and completeness
# - Automatically generates navigation sidebars from documentation structure
# - Validates documentation links and references for accuracy
# - Deploys updated documentation to GitHub Pages when changes are detected
# - Performs documentation health checks and quality assurance
#
# Parameters:
# - force_regenerate: Forces regeneration of all documentation when manually triggered (default: false)
#
# Output Variables:
# - None directly from this workflow (outputs available through GitHub Pages deployment)
#
# Usage Examples:
# Triggered automatically when documentation files change in docs/, src/, or blueprints/ paths,
# or manually dispatched for complete documentation regeneration and validation.
#
# This workflow ensures documentation remains current, properly structured, and accessible
# through automated validation and deployment processes.
---
name: Docs Automation

permissions:
  contents: write
  pull-requests: write
  actions: read

on:  # yamllint disable-line rule:truthy
  push:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'src/**/*.md'
      - 'blueprints/**/*.md'
      - 'scripts/Generate-DocsSidebar.ps1'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'src/**/*.md'
      - 'blueprints/**/*.md'
      - 'scripts/Generate-DocsSidebar.ps1'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regeneration of all documentation'
        required: false
        default: false
        type: boolean

env:
  DOCUMENTATION_PATH: './docs'
  SRC_PATH: './src'
  BLUEPRINTS_PATH: './blueprints'

jobs:
  validate-frontmatter:
    name: üîç Validate Frontmatter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Run docs health check
        uses: azure/powershell@f711c0fc926921f126e18d152ae1d2a35b9876fd # v2
        with:
          inlineScript: |
            Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          azPSVersion: 'latest'

      - name: Validate frontmatter consistency
        shell: pwsh
        run: |
          # Import frontmatter validation functions
          . ./scripts/Generate-DocsSidebar.ps1

          Write-Host "üîç Validating frontmatter across all markdown files..."

          $errors = @()
          $warnings = @()

          # Get all markdown files
          $markdownFiles = Get-ChildItem -Path @('docs', 'src', 'blueprints') `
            -Filter '*.md' -Recurse -ErrorAction SilentlyContinue

          Write-Host "Found $($markdownFiles.Count) markdown files to validate"

          foreach ($file in $markdownFiles) {
            $frontmatter = Get-MarkdownFile -FilePath $file.FullName

            if ($frontmatter) {
              # Validate required fields
              $requiredFields = @('title', 'description', 'author', `
                'ms.date', 'ms.topic')

              foreach ($field in $requiredFields) {
                if (-not $frontmatter.Frontmatter.ContainsKey($field)) {
                  $errors += "Missing required field '$field' in: " + `
                    "$($file.FullName)"
                }
              }

              # Validate date format
              if ($frontmatter.Frontmatter.ContainsKey('ms.date')) {
                $date = $frontmatter.Frontmatter['ms.date']
                if ($date -notmatch '^\d{2}/\d{2}/\d{4}$') {
                  $warnings += "Invalid date format in: $($file.FullName). " + `
                    "Expected MM/DD/YYYY, got: $date"
                }
              }

              # Validate keywords array
              if ($frontmatter.Frontmatter.ContainsKey('keywords')) {
                $keywords = $frontmatter.Frontmatter['keywords']
                if ($keywords -isnot [array] -and $keywords -notmatch ',') {
                  $warnings += "Keywords should be an array in: " + `
                    "$($file.FullName)"
                }
              }
            } else {
              $warnings += "No frontmatter found in: $($file.FullName)"
            }
          }

          # Output results
          if ($warnings.Count -gt 0) {
            Write-Host "‚ö†Ô∏è Warnings found:" -ForegroundColor Yellow
            $warnings | ForEach-Object {
              Write-Host "  $_" -ForegroundColor Yellow
            }
          }

          if ($errors.Count -gt 0) {
            Write-Host "‚ùå Errors found:" -ForegroundColor Red
            $errors | ForEach-Object {
              Write-Host "  $_" -ForegroundColor Red
            }
            exit 1
          }

          Write-Host "‚úÖ Frontmatter validation completed successfully" `
            -ForegroundColor Green

  generate-sidebar:
    name: üèóÔ∏è Generate Three-Tree Sidebar
    runs-on: ubuntu-latest
    needs: validate-frontmatter
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PowerShell
        uses: azure/powershell@f711c0fc926921f126e18d152ae1d2a35b9876fd # v2
        with:
          inlineScript: |
            Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          azPSVersion: 'latest'

      - name: Generate and validate enhanced sidebar
        shell: pwsh
        run: |
          Write-Host "üèóÔ∏è Generating enhanced multi-section navigation sidebar..."

          $sidebarPaths = @(
            "docs/_sidebar.md",
            "docs/_parts/docs-sidebar.md",
            "docs/_parts/praxisworx-sidebar.md",
            "docs/_parts/blueprints-sidebar.md",
            "docs/_parts/infrastructure-sidebar.md"
          )

          $originalSidebars = @{}
          foreach ($path in $sidebarPaths) {
            if (Test-Path $path) {
              $originalSidebars[$path] = Get-Content $path -Raw
            }
          }

          . ./scripts/Generate-DocsSidebar.ps1

          Write-Host "‚úÖ Sidebar generation completed"

          $validationPassed = $true
          $issues = @()

          foreach ($path in $sidebarPaths) {
            if (Test-Path $path) {
              $newContent = Get-Content $path -Raw
              $originalContent = $originalSidebars[$path]

              if ($null -eq $originalContent) {
                $originalContent = ""
              }

              $originalClean = ($originalContent -replace "Generated on.*?\n", "")
              $newClean = ($newContent -replace "Generated on.*?\n", "")

              if ($originalClean -ne $newClean) {
                $issues += "- $path is outdated"
                $validationPassed = $false

                Write-Host "`nüìÑ Detailed diff for: $path" -ForegroundColor Yellow
                Write-Host ("=" * 80) -ForegroundColor Yellow

                Write-Host "üìä Character counts:" -ForegroundColor Cyan
                Write-Host "  Original (checked-in): $($originalClean.Length) chars" -ForegroundColor Cyan
                Write-Host "  Generated (expected):  $($newClean.Length) chars" -ForegroundColor Cyan
                Write-Host "  Difference: $($newClean.Length - $originalClean.Length) chars" -ForegroundColor Cyan

                $tempOriginal = [System.IO.Path]::GetTempFileName()
                $tempNew = [System.IO.Path]::GetTempFileName()
                $originalClean | Set-Content $tempOriginal -NoNewline
                $newClean | Set-Content $tempNew -NoNewline

                if (Get-Command git -ErrorAction SilentlyContinue) {
                  Write-Host "`nüîç Git diff output:" -ForegroundColor Cyan
                  try {
                    $diffOutput = git diff --no-index --word-diff=plain --unified=3 $tempOriginal $tempNew 2>&1
                    if ($diffOutput) {
                      $diffOutput | ForEach-Object {
                        $line = $_
                        if ($line -match '^\+') {
                          Write-Host $line -ForegroundColor Green
                        } elseif ($line -match '^\-') {
                          Write-Host $line -ForegroundColor Red
                        } elseif ($line -match '^@@') {
                          Write-Host $line -ForegroundColor Cyan
                        } else {
                          Write-Host $line
                        }
                      }
                    }
                  } catch {
                    Write-Host "Git diff failed, falling back to PowerShell comparison" -ForegroundColor Yellow
                  }
                }

                Write-Host "`nüîç Line-by-line comparison (first 30 differences):" -ForegroundColor Cyan
                $originalLines = $originalClean -split "`r?`n"
                $newLines = $newClean -split "`r?`n"

                Write-Host "Original has $($originalLines.Count) lines, Generated has $($newLines.Count) lines" -ForegroundColor Cyan

                $comparison = Compare-Object -ReferenceObject $originalLines -DifferenceObject $newLines -IncludeEqual | Select-Object -First 30

                $diffCount = 0
                foreach ($diff in $comparison) {
                  if ($diff.SideIndicator -ne "==") {
                    $diffCount++
                    $indicator = if ($diff.SideIndicator -eq "<=") { "- ORIGINAL" } else { "+ GENERATED" }
                    $color = if ($diff.SideIndicator -eq "<=") { "Red" } else { "Green" }
                    Write-Host "$indicator`: $($diff.InputObject)" -ForegroundColor $color
                  }
                }

                if ($diffCount -eq 0) {
                  Write-Host "No line differences found, but content differs (possibly whitespace or encoding)" -ForegroundColor Yellow

                  Write-Host "`nüîç Checking for whitespace differences:" -ForegroundColor Cyan
                  $originalNoSpace = $originalClean -replace '\s+', ''
                  $newNoSpace = $newClean -replace '\s+', ''

                  if ($originalNoSpace -eq $newNoSpace) {
                    Write-Host "Content is identical when whitespace is removed - this is a whitespace-only difference" -ForegroundColor Yellow
                  } else {
                    Write-Host "Content differs even without whitespace" -ForegroundColor Yellow
                    Write-Host "Original (no space): $($originalNoSpace.Length) chars" -ForegroundColor Cyan
                    Write-Host "Generated (no space): $($newNoSpace.Length) chars" -ForegroundColor Cyan
                  }
                }

                Remove-Item $tempOriginal -ErrorAction SilentlyContinue
                Remove-Item $tempNew -ErrorAction SilentlyContinue

                Write-Host ("=" * 80) -ForegroundColor Yellow
                Write-Host ""
              }
            } else {
              $issues += "- $path is missing after generation"
              $validationPassed = $false
            }
          }

          if (-not (Test-Path "docs/_parts/")) {
            $issues += "- docs/_parts/ directory missing - required for multi-section navigation"
            $validationPassed = $false
          }

          if (-not $validationPassed) {
            $messageLines = @(
              "Sidebar validation failed:",
              ($issues -join "`n"),
              "",
              "Detailed comparison output is shown above."
            )

            $message = $messageLines -join "`n"

            Write-Host "‚ùå Sidebar validation failed!" -ForegroundColor Red
            Write-Host $message -ForegroundColor Red

            if ($env:GITHUB_EVENT_NAME -eq "pull_request") {
              Write-Host "::error::Sidebar navigation files are out of date."
              exit 1
            } else {
              Write-Host "::warning::Sidebar differences detected. Continuing so the workflow can commit updates."
            }
          } else {
            Write-Host "‚úÖ All sidebar sections are up to date" -ForegroundColor Green
          }

      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain _sidebar.md docs/_parts 2>/dev/null)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "üìù Sidebar changes detected"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No sidebar changes needed"
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true' &&
          github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Documentation Bot"
          git add _sidebar.md
          if [ -d "docs/_parts" ]; then
            git add docs/_parts
          fi
          git commit -m "ü§ñ Auto-update three-tree navigation sidebar

          - Updated sidebar with latest documentation structure
          - Generated on $(date -u)
          - Includes Bicep, Terraform, and README documentation trees"
          git push

  validate-links:
    name: üîó Validate Documentation Links
    runs-on: ubuntu-latest
    needs: generate-sidebar
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@89d709d423dc495668cd762a18dd4a070611be3f # v4.1.1
        with:
          node-version: '18'

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Check links in documentation
        continue-on-error: true
        run: |
          echo "üîó Checking links in documentation files..."

          # Create config file for link checking
          cat > .markdown-link-check.json << EOF
          {
            "ignorePatterns": [
              {
                "pattern": "^http://localhost"
              },
              {
                "pattern": "^https://localhost"
              },
              {
                "pattern": "^#"
              }
            ],
            "timeout": "10s",
            "retryOn429": true,
            "retryCount": 3,
            "fallbackOnError": true
          }
          EOF

          # Check all markdown files
          find docs src blueprints praxisworx .github copilot \
            -name "*.md" -type f | \
            grep -v node_modules | \
            xargs -I {} sh -c 'echo "Checking: {}" &&
              markdown-link-check {} --config .markdown-link-check.json'

  build-documentation:
    name: üèóÔ∏è Build Documentation Site
    runs-on: ubuntu-latest
    needs: [validate-frontmatter, generate-sidebar, validate-links]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@89d709d423dc495668cd762a18dd4a070611be3f # v4.1.1
        with:
          node-version: '18'

      - name: Install docsify-cli
        run: npm install -g docsify-cli

      - name: Test documentation build
        run: |
          echo "üèóÔ∏è Testing documentation build..."

          # Create a temporary server to test the build
          timeout 10s docsify serve . --port 3000 || true

          echo "‚úÖ Documentation build test completed"

      - name: Generate search index
        run: |
          echo "üîç Generating search index for enhanced search..."

          # Create search index for better search performance
          cat > search-index.js << EOF
          // Enhanced search index for three-tree documentation
          window.searchIndex = {
            bicepDocs: [],
            terraformDocs: [],
            readmeDocs: [],
            mainDocs: []
          };
          EOF

          echo "‚úÖ Search index generated"
  report-documentation-health:
    name: üìä Documentation Health Report
    runs-on: ubuntu-latest
    needs:
      - validate-frontmatter
      - generate-sidebar
      - validate-links
      - build-documentation
    if: always()
    permissions:
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.1.7

      - name: Generate documentation metrics
        shell: pwsh
        run: |
          Write-Host "üìä Generating documentation health report..."

          # Count documentation files by type
          $docsCount = (Get-ChildItem -Path 'docs' -Filter '*.md' -Recurse `
            -ErrorAction SilentlyContinue).Count
          $srcCount = (Get-ChildItem -Path 'src' -Filter '*.md' -Recurse `
            -ErrorAction SilentlyContinue).Count
          $blueprintsCount = (Get-ChildItem -Path 'blueprints' -Filter '*.md' `
            -Recurse -ErrorAction SilentlyContinue).Count
          $praxisworxCount = (Get-ChildItem -Path 'praxisworx' -Filter '*.md' `
            -Recurse -ErrorAction SilentlyContinue).Count
          $githubCount = (Get-ChildItem -Path '.github' -Filter '*.md' `
            -Recurse -ErrorAction SilentlyContinue).Count
          $copilotCount = (Get-ChildItem -Path 'copilot' -Filter '*.md' `
            -Recurse -ErrorAction SilentlyContinue).Count

          # Generate report
          $report = @"
          # üìö Documentation Health Report

          Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')

          ## üìà Documentation Statistics

          | Category | File Count |
          |----------|------------|
          | Main Documentation | $docsCount |
          | Infrastructure Components | $srcCount |
          | Blueprints | $blueprintsCount |
          | Learning Platform (PraxisWorx) | $praxisworxCount |
          | GitHub Resources | $githubCount |
          | AI Assistant Guides (Copilot) | $copilotCount |
          | **Total** | **$($docsCount + $srcCount + $blueprintsCount + `
            $praxisworxCount + $githubCount + $copilotCount)** |

          ## üèóÔ∏è Three-Tree Architecture Status

          - ‚úÖ Bicep Documentation Tree: Auto-generated navigation
          - ‚úÖ Terraform Documentation Tree: Auto-generated navigation
          - ‚úÖ README Documentation Tree: Manual README organization

          ## üîç Quality Metrics

          - Frontmatter Validation: `
            ${{ needs.validate-frontmatter.result }}
          - Sidebar Generation: ${{ needs.generate-sidebar.result }}
          - Link Validation: ${{ needs.validate-links.result }}
          - Build Test: ${{ needs.build-documentation.result }}

          ---

          *This report is automatically generated by the Documentation Automation workflow.*
          "@

          Write-Host $report

          # Save report as artifact
          $report | Out-File -FilePath 'documentation-health-report.md' `
            -Encoding UTF8

          Write-Host "‚úÖ Documentation health report generated"

      - name: Upload report
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50 # v4.4.0
        with:
          name: documentation-health-report
          path: documentation-health-report.md
          retention-days: 30

      - name: Comment on PR with report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync(
              'documentation-health-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
