# Pull Request Validation Workflow
#
# Purpose:
# This workflow runs the CI/CD pipeline for pull requests to maintain code quality,
# validate infrastructure changes, and ensure readiness for merging to main branch.
#
# Functionality:
# - Detects changed files in the pull request to determine required validation steps
# - Runs MegaLinter for static code analysis across multiple languages
# - Validates Terraform configurations using init, validate, plan, and test operations
# - Checks Azure IoT Operations component versions against latest published releases
# - Ensures consistent documentation standards
# - Tests resource provider scripts in PowerShell and bash
#
# Parameters:
# None - This workflow is triggered automatically on pull requests to protected branches
#
# Output Variables:
# None - Results are provided as GitHub checks, annotations, and artifacts
#
# Usage Examples:
# This workflow is automatically triggered on pull requests and doesn't need manual invocation.
#
# This comprehensive validation workflow helps maintain code quality and prevents
# problematic code from being merged into the main branch.
---
name: PR Validation

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

on:  # yamllint disable-line rule:truthy
  pull_request:
    # Only run on PRs targeting the main branch
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      includeIaCFolders:
        description: 'Include all Infrastructure as Code folders in the matrix check'
        required: true
        default: false
        type: boolean

jobs:
  # #CodeQL Analysis job for PR code security scanning
  # codeql-analysis:
  #   name: CodeQL Analysis
  #   runs-on: ubuntu-latest
  #   permissions:
  #     # Required for all workflows
  #     security-events: write
  #     # Only required for workflows in private repositories
  #     actions: read
  #     contents: read
  #
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: ['javascript', 'python', 'typescript', 'csharp']
  #       # CodeQL supports these languages: https://aka.ms/codeql-docs/language-support
  #
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v2
  #       with:
  #         languages: ${{ matrix.language }}
  #
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v2
  #
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v2
  #       with:
  #         category: "/language:${{matrix.language}}"

  # Dependency scanning job for PRs
  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    # needs: [codeql-analysis]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Dependency Review
        uses: actions/dependency-review-action@40c09b7dc99638e5ddb0bfd91c1673effc064d8a

  # Security monitoring job for PRs - using modular security workflow
  security-monitoring:
    name: Security PR Validation
    needs: [dependency-scan]
    uses: ./.github/workflows/security-pr.yml
    with:
      working-directory: '.'
      enable-egress-filter: true
      enable-endpoint-monitoring: true

  # MegaLinter job for PRs
  mega-linter:
    name: MegaLinter
    needs: [security-monitoring]
    uses: ./.github/workflows/megalinter.yml
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    with:
      github_comment_reporter: true

  # Documentation automation validation for PRs
  docs-automation:
    name: Documentation Automation
    needs: [mega-linter]
    uses: ./.github/workflows/docs-automation.yml
    with:
      force_regenerate: false
    secrets: inherit

  # Call docs-check-terraform for PR validation
  docs-check-terraform:
    name: Terraform Documentation Check
    needs: [mega-linter]
    uses: ./.github/workflows/docs-check-terraform.yml
    with:
      break_build: true
      terraformDocsVersion: 'v0.19.0'
    secrets: inherit

  # Call docs-check-bicep workflow
  docs-check-bicep:
    name: Bicep Documentation Check
    needs: [mega-linter]
    uses: ./.github/workflows/docs-check-bicep.yml
    with:
      break_build: true
    secrets: inherit

  # AIO version checks for PRs
  aio-version-check:
    name: AIO Version Check
    needs: [mega-linter]
    uses: ./.github/workflows/aio-version-checker.yml
    with:
      iac-type: all
      break-build: false
  # Use reusable workflow to detect detailed changes and create folder matrix
  matrix-changes:
    name: Detect Matrix Changes
    needs: [docs-automation, docs-check-terraform, docs-check-bicep]
    uses: ./.github/workflows/matrix-folder-check.yml
    with:
      displayName: 'Detect component changes for PR validation'
      includeIaCFolders: ${{ github.event_name == 'workflow_dispatch' && inputs.includeIaCFolders || false }}
      includeApplications: false

  # PowerShell Resource Provider Tests for PRs
  pwsh-provider-tests:
    name: PowerShell Provider Tests
    needs: [matrix-changes]
    if: needs.matrix-changes.outputs.changesInRpEnablementPwsh == 'true'
    uses: ./.github/workflows/resource-provider-pwsh-tests.yml
    with:
      working-directory: 'src/azure-resource-providers'
      test-results-output: 'PWSH-TEST-RESULTS.xml'
    secrets: inherit

  # Terraform variable compliance check for PRs
  terraform-var-compliance:
    name: Terraform Variable Compliance
    needs: [matrix-changes]
    uses: ./.github/workflows/variable-compliance-terraform.yml
    permissions:
      contents: write
      statuses: write
    with:
      break_build: true
    secrets: inherit

  # Terraform tests using matrix for each changed module
  terraform-module-tests:
    name: Terraform Module Tests
    needs: [matrix-changes]
    if: needs.matrix-changes.outputs.changesInTfInstall == 'true' && fromJson(needs.matrix-changes.outputs.changedTfFolders).folderName[0] != null
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-changes.outputs.changedTfFolders) }}
    uses: ./.github/workflows/cluster-test-terraform.yml
    with:
      working-directory: ${{ matrix.folderName }}
      terraform-version: '1.9.8'
      test-apply: false
    secrets: inherit

  # Application matrix builds for each changed application
  application-matrix-builds:
    name: Application Matrix Builds
    needs: [matrix-changes]
    if: needs.matrix-changes.outputs.changesInApplications == 'true' && fromJson(needs.matrix-changes.outputs.changedApplicationFolders).folderName[0] != null
    uses: ./.github/workflows/application-matrix-builds.yml
    with:
      applicationMatrix: ${{ needs.matrix-changes.outputs.changedApplicationFolders }}
    secrets: inherit
