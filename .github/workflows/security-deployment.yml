# Security Deployment Workflow - Critical deployment security checks
# This workflow performs comprehensive security validation for deployment readiness.
# It mirrors the Azure DevOps Scheduled stage security suite for deployment contexts.
# Designed to run before critical deployments to ensure security posture compliance.

name: Security Deployment Validation

on:
  workflow_call:
    inputs:
      max-age-days:
        description: 'Maximum age in days for dependency staleness check'
        required: false
        type: number
        default: 30
      allowed-endpoints:
        description: 'Comma-separated list of allowed network endpoints for egress monitoring'
        required: false
        type: string
        default: 'github.com,registry-1.docker.io,*.azurecr.io,packages.microsoft.com,*.azure.com'
      break-build:
        description: 'Whether to break build on security findings'
        required: false
        type: boolean
        default: true
      iac-types:
        description: 'Infrastructure types to validate (all, terraform, bicep)'
        required: false
        type: string
        default: 'all'
  workflow_dispatch:
    inputs:
      max-age-days:
        description: 'Maximum age in days for dependency staleness check'
        required: false
        type: number
        default: 30
      allowed-endpoints:
        description: 'Comma-separated list of allowed network endpoints for egress monitoring'
        required: false
        type: string
        default: 'github.com,registry-1.docker.io,*.azurecr.io,packages.microsoft.com,*.azure.com'
      break-build:
        description: 'Whether to break build on security findings'
        required: false
        type: boolean
        default: true
      iac-types:
        description: 'Infrastructure types to validate (all, terraform, bicep)'
        required: false
        type: string
        default: 'all'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Security hardening setup for deployment validation
  security-hardening:
    name: Security Hardening Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33 # v2.10.2
        with:
          egress-policy: audit
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            objects.githubusercontent.com:443

      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          fetch-depth: 0

      - name: Initialize security hardening
        run: |
          echo "Security hardening initialized for deployment validation"
          echo "Deployment security validation starting..."

  # SHA dependency staleness monitoring for supply chain security
  dependency-staleness:
    name: Dependency Staleness Check
    runs-on: ubuntu-latest
    needs: security-hardening
    timeout-minutes: 15
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33 # v2.10.2
        with:
          egress-policy: audit
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443

      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@bba65e51ff35d50c6dbaaacd8a4681db13aa7cb4 # v5.3.0
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run dependency staleness check
        run: |
          python scripts/dependency-staleness-check.py \
            --max-age-days ${{ inputs.max-age-days }} \
            --output-path stale-dependencies.json \
            --fail-on-stale ${{ inputs.break-build }}

      - name: Upload staleness results
        if: always()
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50 # v4.4.3
        with:
          name: dependency-staleness-results
          path: stale-dependencies.json
          retention-days: 30

  # OSSF Scorecard analysis for supply chain security assessment
  ossf-scorecard:
    name: OSSF Scorecard Analysis
    runs-on: ubuntu-latest
    needs: security-hardening
    timeout-minutes: 20
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33 # v2.10.2
        with:
          egress-policy: audit
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            oss-fuzz-build-logs.storage.googleapis.com:443
            www.bestpractices.dev:443

      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          persist-credentials: false

      - name: Run OSSF Scorecard
        uses: ossf/scorecard-action@4eaacf0543bb3f2c246792bd56e8cdeffafb205a # v2.4.0
        with:
          results_file: scorecard-results.sarif
          results_format: sarif
          publish_results: false

      - name: Upload OSSF Scorecard results
        if: always()
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50 # v4.4.3
        with:
          name: ossf-scorecard-results
          path: scorecard-results.sarif
          retention-days: 30

      - name: Upload SARIF results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@294a9d92911152fe08befb9ec03e240add280cb3
        with:
          sarif_file: scorecard-results.sarif

  # Network egress monitoring for build security validation
  egress-monitoring:
    name: Network Egress Monitoring
    runs-on: ubuntu-latest
    needs: security-hardening
    timeout-minutes: 15
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33 # v2.10.2
        with:
          egress-policy: block
          allowed-endpoints: ${{ inputs.allowed-endpoints }}

      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2

      - name: Test network egress controls
        run: |
          echo "Testing network egress controls for deployment security..."
          echo "Allowed endpoints: ${{ inputs.allowed-endpoints }}"

          # Test that we can reach allowed endpoints
          echo "Testing connectivity to allowed endpoints..."
          curl -s --max-time 5 https://github.com || echo "GitHub connection failed"

          echo "Network egress monitoring completed successfully"

  # AIO version checking for deployment readiness
  aio-version-check:
    name: AIO Version Validation
    runs-on: ubuntu-latest
    needs: security-hardening
    timeout-minutes: 15
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33 # v2.10.2
        with:
          egress-policy: audit
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            files.pythonhosted.org:443

      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2

      - name: Setup Python
        uses: actions/setup-python@bba65e51ff35d50c6dbaaacd8a4681db13aa7cb4 # v5.3.0
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run AIO version check
        run: |
          python scripts/aio-version-checker.py \
            --iac-type ${{ inputs.iac-types }} \
            --break-build ${{ inputs.break-build }} \
            --output-format json

      - name: Upload AIO version results
        if: always()
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50 # v4.4.3
        with:
          name: aio-version-check-results
          path: aio-version-check-results.json
          retention-days: 30

  # Comprehensive security validation summary
  security-validation-summary:
    name: Security Validation Summary
    runs-on: ubuntu-latest
    needs: [security-hardening, dependency-staleness, ossf-scorecard, egress-monitoring, aio-version-check]
    if: always()
    timeout-minutes: 10
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@92c522aaa6f53af082553dedc1596c80b71aba33 # v2.10.2
        with:
          egress-policy: audit
          allowed-endpoints: >
            github.com:443
            api.github.com:443

      - name: Download all security artifacts
        uses: actions/download-artifact@4a24838f3d5601fd639834081e118c2995d51e1c # v4.1.8
        with:
          path: security-results

      - name: Generate security validation summary
        run: |
          echo "# Security Deployment Validation Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Job Results" >> security-summary.md
          echo "- Security Hardening: ${{ needs.security-hardening.result }}" >> security-summary.md
          echo "- Dependency Staleness: ${{ needs.dependency-staleness.result }}" >> security-summary.md
          echo "- OSSF Scorecard: ${{ needs.ossf-scorecard.result }}" >> security-summary.md
          echo "- Egress Monitoring: ${{ needs.egress-monitoring.result }}" >> security-summary.md
          echo "- AIO Version Check: ${{ needs.aio-version-check.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "## Deployment Security Status" >> security-summary.md

          if [[ "${{ needs.security-hardening.result }}" == "success" && \
                "${{ needs.dependency-staleness.result }}" == "success" && \
                "${{ needs.ossf-scorecard.result }}" == "success" && \
                "${{ needs.egress-monitoring.result }}" == "success" && \
                "${{ needs.aio-version-check.result }}" == "success" ]]; then
            echo "✅ **DEPLOYMENT APPROVED**: All security validations passed" >> security-summary.md
            echo "deployment-approved=true" >> $GITHUB_OUTPUT
          else
            echo "❌ **DEPLOYMENT BLOCKED**: Security validation failures detected" >> security-summary.md
            echo "deployment-approved=false" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.break-build }}" == "true" ]]; then
              exit 1
            fi
          fi

          cat security-summary.md

      - name: Upload security summary
        if: always()
        uses: actions/upload-artifact@2848b2cda0e5190984587ec6bb1f36730ca78d50 # v4.4.3
        with:
          name: security-deployment-summary
          path: security-summary.md
          retention-days: 90
