# Bicep Documentation Compliance Check Workflow
#
# Purpose:
# This workflow validates documentation standards across the codebase to ensure
# all Bicep modules are properly documented and documentation stays in sync with code.
#
# Functionality:
# - Verifies Bicep module documentation is current using custom documentation generator
# - Identifies and reports links containing language-specific paths (e.g., 'en-us')
#   which may become outdated when documentation is updated for different languages
# - Creates GitHub annotations for issues found
# - Generates a summary report of findings
#
# Parameters:
# - BREAK_BUILD: Controls whether to fail the workflow on documentation issues
#
# Output Variables:
# - Documentation update status is provided via GitHub annotations and workflow summary
#
# Usage Examples:
# ```yaml
# # Basic validation with warnings:
# name: Check Bicep Documentation
# uses: ./.github/workflows/docs-check-bicep.yml
# with:
#   break_build: false
#
# # Strict validation (fail build on issues):
# name: Validate Bicep Documentation
# uses: ./.github/workflows/docs-check-bicep.yml
# with:
#   break_build: true
# ```
#
# This workflow helps maintain accurate and consistent documentation across the codebase,
# improving usability and reducing onboarding time for new contributors.
---
name: Bicep Docs Check

on: # yamllint disable-line rule:truthy
  workflow_dispatch:  # Allow manual triggering and being called from ci-cd.yml
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean
  workflow_call:  # Allow being called from other workflows
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean

jobs:
  docs-check-bicep:
    name: Bicep Documentation Compliance Check
    runs-on: ubuntu-latest

    env:
      BREAK_BUILD: ${{ inputs.break_build || github.event.inputs.break_build || 'false' }}  # Support both workflow_call and workflow_dispatch

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for comparison

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        run: |
          # Install dependencies from requirements.txt if it exists
          if [ -f ./requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r ./requirements.txt
          else
            # Fallback to installing just what's needed
            pip install requests jinja2
          fi
        shell: bash

      - name: Setup Azure CLI with Bicep
        run: |
          # Check if Azure CLI is installed
          if ! command -v az &>/dev/null; then
            echo "Azure CLI is not installed. Installing now..."
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

          # Install/update Bicep extension
          echo "Installing/updating Bicep extension..."
          az bicep install
          az bicep version
        shell: bash

      - name: Check for changes in Bicep documentation
        id: docs-check-bicep
        run: |
          # Run the bicep-docs-check.sh script and capture its output
          output=$(./scripts/bicep-docs-check.sh)

          # Get the last line which contains the true/false result
          docs_changed=$(echo "$output" | tail -n 1)

          # Check if there are any changes in the Bicep documentation
          if [ "$docs_changed" = true ]; then
            echo "Updates are required for Bicep documentation."
            echo "Please go into the project's scripts directory, run the update-all-bicep-docs.sh script and commit changes."

            echo "::warning::Bicep auto-gen documentation needs to be updated. Please run the scripts/update-all-bicep-docs.sh script and commit the changes."

            if [[ "${{ env.BREAK_BUILD }}" == "true" ]]; then
              echo "::error::Bicep auto-gen documentation needs to be updated. Please run the scripts/update-all-bicep-docs.sh script and commit the changes."
              exit 1
            fi
          else
            echo "No updates detected in the Bicep documentation."
          fi
        shell: bash

      - name: Check for language path segments in links
        id: link-lang-check
        run: |
          # Run the link-lang-check.py script to find en-us URLs
          echo "Checking for language path segments (en-us) in links..."
          links_json=$(python3 $(pwd)/scripts/link-lang-check.py)

          # Check if we got valid JSON results
          if echo "$links_json" | jq empty 2>/dev/null; then
            # Count the number of links found
            link_count=$(echo "$links_json" | jq '. | length')

            if [ "$link_count" -gt 0 ]; then
              echo "Found $link_count URLs with language path segments (en-us)."

              # Loop through each link and create a build warning/error
              echo "$links_json" | jq -c '.[]' | while read -r link; do
                file=$(echo "$link" | jq -r '.file')
                line=$(echo "$link" | jq -r '.line_number')
                url=$(echo "$link" | jq -r '.original_url')

                # Create a warning for each link
                echo "::warning file=$file,line=$line::URL contains language path segment (en-us): $url"

                if [[ "${{ env.BREAK_BUILD }}" == "true" ]]; then
                  echo "::error file=$file,line=$line::URL contains language path segment (en-us): $url"
                  exit_with_error=true
                fi
              done

              if [[ "$exit_with_error" == "true" ]]; then
                exit 1
              fi
            else
              echo "No URLs with language path segments (en-us) found."
            fi
          else
            echo "Error parsing output from link-lang-check.py script"
            echo "$links_json"
            echo "::warning::Error parsing output from link-lang-check.py script"
          fi
        shell: bash
