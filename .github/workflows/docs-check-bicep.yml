---
# yamllint disable rule:line-length
# Bicep Documentation Compliance Check Workflow
# Purpose:
# This workflow validates documentation standards across the codebase to ensure
# all Bicep modules are properly documented and documentation stays in sync with code.
permissions:
  contents: read
#
# Functionality:
# - Verifies Bicep module documentation is current using custom documentation generator
# - Identifies and reports links containing language-specific paths (e.g., 'en-us')
#   which may become outdated when documentation is updated for different languages
# - Creates GitHub annotations for issues found
# - Generates a summary report of findings
#
# Parameters:
# - BREAK_BUILD: Controls whether to fail the workflow on documentation issues
#
# Output Variables:
# - Documentation update status is provided via GitHub annotations and workflow summary
#
# Usage Examples:
# ```yaml
# # Basic validation with warnings:
# name: Check Bicep Documentation
# uses: ./.github/workflows/docs-check-bicep.yml
# with:
#   break_build: false
#
# # Strict validation (fail build on issues):
# name: Validate Bicep Documentation
# uses: ./.github/workflows/docs-check-bicep.yml
# with:
#   break_build: true
# ```
#
# This workflow helps maintain accurate and consistent documentation across the codebase,
# improving usability and reducing onboarding time for new contributors.
name: Bicep Docs Check

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:  # Allow manual triggering and being called from ci-cd.yml
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean
  workflow_call:  # Allow being called from other workflows
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean

jobs:
  docs-check-bicep:
    name: Bicep Documentation Compliance Check
    runs-on: ubuntu-latest

    env:
      BREAK_BUILD: ${{ inputs.break_build || github.event.inputs.break_build || 'false' }}  # Support both workflow_call and workflow_dispatch

    steps:
      - name: Checkout Code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0  # Full git history for comparison

      - name: Setup PowerShell
        run: |
          echo "PowerShell Version: $($PSVersionTable.PSVersion)"
          echo "PowerShell Edition: $($PSVersionTable.PSEdition)"
        shell: pwsh

      - name: Setup Azure CLI with Bicep
        run: |
          # Check if Azure CLI is installed
          if ! command -v az &>/dev/null; then
            echo "Azure CLI is not installed. Installing now..."
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

          # Install/update Bicep extension
          echo "Installing/updating Bicep extension..."
          az bicep install
          az bicep version
        shell: bash

      - name: Check for changes in Bicep documentation
        id: docs-check-bicep
        run: |
          # Run the bicep-docs-check.sh script and capture its output
          docs_changed=$(tail -n 1 $(pwd)/scripts/bicep-docs-check.sh)

          # Check if there are any changes in the Bicep documentation
          if [ "$docs_changed" = true ]; then
            echo "Updates are required for Bicep documentation."
            echo "Please go into the project's scripts directory, run the update-all-bicep-docs.sh script and commit changes."

            echo "::warning::Bicep auto-gen documentation needs to be updated. Please run the scripts/update-all-bicep-docs.sh script and commit the changes."

            if [[ "${{ env.BREAK_BUILD }}" == "true" ]]; then
              echo "::error::Bicep auto-gen documentation needs to be updated. Please run the scripts/update-all-bicep-docs.sh script and commit the changes."
              exit 1
            fi
          else
            echo "No updates detected in the Bicep documentation."
          fi
        shell: bash

      - name: Check for language path segments in links
        id: link-lang-check
        run: |
          Write-Host "Checking for language path segments (en-us) in links..."

          # Run the PowerShell script and capture JSON output
          $jsonOutput = & "${{ github.workspace }}/scripts/linting/Link-Lang-Check.ps1"
          $links = $jsonOutput | ConvertFrom-Json

          if ($links.Count -gt 0) {
            Write-Host "Found $($links.Count) URLs with language path segments (en-us)."

            foreach ($link in $links) {
              $issueType = if ("${{ env.BREAK_BUILD }}" -eq "true") { "error" } else { "warning" }
              $message = "URL contains language path segment (en-us): $($link.original_url)"
              Write-Host "::$issueType file=$($link.file),line=$($link.line_number)::$message"
            }

            if ("${{ env.BREAK_BUILD }}" -eq "true") {
              Write-Host "::error::Build failed due to language path segments in URLs"
              exit 1
            }
          } else {
            Write-Host "No URLs with language path segments (en-us) found."
          }
        shell: pwsh
