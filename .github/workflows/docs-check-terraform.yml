---
# yamllint disable rule:line-length
# Terraform Documentation Compliance Check Workflow
# Purpose:
# This workflow validates documentation standards across the codebase to ensure
# all Terraform modules are properly documented and documentation stays in sync with code.
#
# Functionality:
# - Verifies Terraform module documentation is current using terraform-docs
# - Identifies and reports links containing language-specific paths (e.g., 'en-us')
#   which may become outdated when documentation is updated for different languages
# - Creates GitHub annotations for issues found
# - Generates a summary report of findings
#
# Parameters:
# - TERRAFORM_DOCS_VERSION: Version of terraform-docs to use for checking documentation
# - BREAK_BUILD: Controls whether to fail the workflow on documentation issues
#
# Output Variables:
# - Documentation update status is provided via GitHub annotations and workflow summary
#
# Usage Examples:
# ```yaml
# # Basic validation with warnings:
# name: Check Terraform Documentation
# uses: ./.github/workflows/docs-check-terraform.yml
# with:
#   break_build: false
#
# # Strict validation (fail build on issues):
# name: Validate Terraform Documentation
# uses: ./.github/workflows/docs-check-terraform.yml
# with:
#   break_build: true
# ```
#
# This workflow helps maintain accurate and consistent documentation across the codebase,
# improving usability and reducing onboarding time for new contributors.

name: Terraform Docs Check

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:  # Allow manual triggering and being called from ci-cd.yml
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean
      terraformDocsVersion:
        description: 'Version of terraform-docs to use'
        required: false
        default: 'v0.20.0'
        type: string
  workflow_call:  # Allow being called from other workflows
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean
      terraformDocsVersion:
        description: 'Version of terraform-docs to use'
        required: false
        default: 'v0.20.0'
        type: string

jobs:
  docs-check-terraform:
    name: Terraform Documentation Compliance Check
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          fetch-depth: 0  # Full git history for comparison

      - name: Setup PowerShell
        run: |
          echo "PowerShell Version: $($PSVersionTable.PSVersion)"
          echo "PowerShell Edition: $($PSVersionTable.PSEdition)"
        shell: pwsh

      - name: Install terraform-docs
        run: |
          ./scripts/install-terraform-docs.sh -v "${{ inputs.terraformDocsVersion }}"
        shell: bash

      - name: Check for changes in documentation
        run: |
          # Call tf-docs-check.sh script to check for changes
          ./scripts/tf-docs-check.sh
          readme_changed=$(tail -n 1 $(pwd)/scripts/tf-docs-check.sh)

          # Check if there are any changes in the documentation
          if [ "$readme_changed" = true ]; then
            echo "Updates are required for documentation."
            echo "Please go into the project's src directory, run the update-all-terraform-docs.sh script, and commit changes."
            echo "::warning::Documentation needs to be updated. Please run the update-all-terraform-docs.sh script and commit the changes."
            if [[ "${{ inputs.break_build }}" == "true" ]]; then
              echo "::error::Documentation needs to be updated. Please run the update-all-terraform-docs.sh script and commit the changes."
              exit 1
            fi
          else
            echo "No updates detected in the documentation."
          fi
        shell: bash

      - name: Check for language path segments in links
        id: link-lang-check
        run: |
          Write-Host "Checking for language path segments (en-us) in links..."

          # Run the PowerShell script and capture JSON output
          $jsonOutput = & "${{ github.workspace }}/scripts/linting/Link-Lang-Check.ps1"
          $links = $jsonOutput | ConvertFrom-Json

          if ($links.Count -gt 0) {
            Write-Host "Found $($links.Count) URLs with language path segments (en-us)."

            foreach ($link in $links) {
              $message = "URL contains language path segment (en-us): $($link.original_url)"
              if ("${{ inputs.break_build }}" -eq "true") {
                Write-Host "::error file=$($link.file),line=$($link.line_number)::$message"
              } else {
                Write-Host "::warning file=$($link.file),line=$($link.line_number)::$message"
              }
            }

            if ("${{ inputs.break_build }}" -eq "true") {
              exit 1
            }
          } else {
            Write-Host "No URLs with language path segments (en-us) found."
          }
        shell: pwsh
