---
# Terraform Documentation Compliance Check Workflow
# Purpose:
# This workflow validates documentation standards across the codebase to ensure
# all Terraform modules are properly documented and documentation stays in sync with code.
#
# Functionality:
# - Verifies Terraform module documentation is current using terraform-docs
# - Identifies and reports links containing language-specific paths (e.g., 'en-us')
#   which may become outdated when documentation is updated for different languages
# - Creates GitHub annotations for issues found
# - Generates a summary report of findings
#
# Parameters:
# - TERRAFORM_DOCS_VERSION: Version of terraform-docs to use for checking documentation
# - BREAK_BUILD: Controls whether to fail the workflow on documentation issues
#
# Output Variables:
# - Documentation update status is provided via GitHub annotations and workflow summary
#
# Usage Examples:
# ```yaml
# # Basic validation with warnings:
# name: Check Terraform Documentation
# uses: ./.github/workflows/docs-check-terraform.yml
# with:
#   break_build: false
#
# # Strict validation (fail build on issues):
# name: Validate Terraform Documentation
# uses: ./.github/workflows/docs-check-terraform.yml
# with:
#   break_build: true
# ```
#
# This workflow helps maintain accurate and consistent documentation across the codebase,
# improving usability and reducing onboarding time for new contributors.

name: Terraform Docs Check

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:  # Allow manual triggering and being called from ci-cd.yml
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean
      terraformDocsVersion:
        description: 'Version of terraform-docs to use'
        required: false
        default: 'v0.20.0'
        type: string
  workflow_call:  # Allow being called from other workflows
    inputs:
      break_build:
        description: 'Whether to fail the workflow on documentation issues'
        required: false
        default: false
        type: boolean
      terraformDocsVersion:
        description: 'Version of terraform-docs to use'
        required: false
        default: 'v0.20.0'
        type: string

jobs:
  docs-check-terraform:
    name: Terraform Documentation Compliance Check
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for comparison

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install terraform-docs
        run: |
          ./scripts/install-terraform-docs.sh -v "${{ inputs.terraformDocsVersion }}"
        shell: bash

      - name: Check for changes in documentation
        run: |
          # Call tf-docs-check.sh script to check for changes
          ./scripts/tf-docs-check.sh
          readme_changed=$(tail -n 1 $(pwd)/scripts/tf-docs-check.sh)

          # Check if there are any changes in the documentation
          if [ "$readme_changed" = true ]; then
            echo "Updates are required for documentation."
            echo "Please go into the project's src directory, run the update-all-terraform-docs.sh script, and commit changes."
            echo "::warning::Documentation needs to be updated. Please run the update-all-terraform-docs.sh script and commit the changes."
            if [[ "${{ inputs.break_build }}" == "true" ]]; then
              echo "::error::Documentation needs to be updated. Please run the update-all-terraform-docs.sh script and commit the changes."
              exit 1
            fi
          else
            echo "No updates detected in the documentation."
          fi
        shell: bash

      - name: Check for language path segments in links
        id: link-lang-check
        run: |
          # Run the link-lang-check.py script to find en-us URLs
          echo "Checking for language path segments (en-us) in links..."
          links_json=$(python3 ./scripts/link-lang-check.py)

          # Check if we got valid JSON results
          if echo "$links_json" | jq empty 2>/dev/null; then
            # Count the number of links found
            link_count=$(echo "$links_json" | jq '. | length')

            if [ "$link_count" -gt 0 ]; then
              echo "Found $link_count URLs with language path segments (en-us)."

              # Loop through each link and create a build warning/error
              echo "$links_json" | jq -c '.[]' | while read -r link; do
                file=$(echo "$link" | jq -r '.file')
                line=$(echo "$link" | jq -r '.line_number')
                url=$(echo "$link" | jq -r '.original_url')

                # Create a warning for each link
                echo "::warning file=$file,line=$line::URL contains language path segment (en-us): $url"

                if [[ "${{ inputs.break_build }}" == "true" ]]; then
                  echo "::error file=$file,line=$line::URL contains language path segment (en-us): $url"
                  exit_with_error=true
                fi
              done

              if [[ "$exit_with_error" == "true" ]]; then
                exit 1
              fi
            else
              echo "No URLs with language path segments (en-us) found."
            fi
          else
            echo "Error parsing output from link-lang-check.py script"
            echo "$links_json"
            echo "::warning::Error parsing output from link-lang-check.py script"
          fi
        shell: bash
