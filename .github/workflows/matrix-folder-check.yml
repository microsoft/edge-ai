# Matrix Folder Check Workflow
# Purpose:
# This reusable workflow detects changes in the repository's directory structure and creates
# dynamic outputs that drive conditional execution in downstream jobs. It determines which
# components have been modified and need testing.
#
# Functionality:
# - Detects changes in shell scripts (.sh) in the subscription setup folder
# - Detects changes in PowerShell scripts (.ps1) in the subscription setup folder
# - Creates a dynamic matrix of Terraform folders that have changed
# - Creates a dynamic matrix of Bicep folders that have changed
# - Creates a dynamic matrix of Application folders that have changed (when enabled)
# - Optionally can return all folders containing Terraform and Bicep files regardless of changes
# - Optionally can return all application folders with docker-compose files regardless of changes
# - Uses the Detect-Folder-Changes.ps1 PowerShell script for cross-platform change detection
#
# Parameters:
# - displayName: Display name for this job (optional, default: 'Check for changes in src directory')
# - includeIaCFolders: When true, returns all folders containing Terraform and Bicep files regardless of changes (default: false)
# - includeApplications: When true, returns all application folders from src/500-application regardless of changes (default: false)
#
# Output Variables:
# - changesInRpEnablementShell: true/false indicating if shell scripts in subscription setup have changed
# - changesInRpEnablementPwsh: true/false indicating if PowerShell scripts in subscription setup have changed
# - changesInTfInstall: true/false indicating if any Terraform files have changed
# - changedTfFolders: JSON object with all identified Terraform folder names for matrix strategy
# - changesInBicepInstall: true/false indicating if any Bicep files have changed
# - changedBicepFolders: JSON object with all identified Bicep folder names for matrix strategy
# - changesInApplications: true/false indicating if any Application folders have changed (when includeApplications=true)
# - changedApplicationFolders: JSON object with Application folder details for matrix strategy (when includeApplications=true)
#
# Usage Examples:
# ```yaml
# # Basic usage with default parameters:
# jobs:
#   check-changes:
#     uses: ./.github/workflows/matrix-folder-check.yml
#
# # Include all Infrastructure as Code folders for a complete test run:
#   check-all-iac-folders:
#     uses: ./.github/workflows/matrix-folder-check.yml
#     with:
#       includeIaCFolders: true
#       displayName: "Check all IaC folders"
#
# # Include all application folders for complete builds:
#   check-all-applications:
#     uses: ./.github/workflows/matrix-folder-check.yml
#     with:
#       includeApplications: true
#       displayName: "Check all applications"
#
# # Include both IaC and applications for comprehensive testing:
#   check-all-components:
#     uses: ./.github/workflows/matrix-folder-check.yml
#     with:
#       includeIaCFolders: true
#       includeApplications: true
#       displayName: "Check all components"
#
# # Using outputs in a downstream job for Applications:
#   application-builds:
#     needs: check-changes
#     if: ${{ needs.check-changes.outputs.changesInApplications == 'true' }}
#     strategy:
#       matrix: ${{ fromJson(needs.check-changes.outputs.changedApplicationFolders) }}
#     steps:
#       - name: Build Application
#         run: |
#           echo "Building application: ${{ matrix.applicationName }}"
#           echo "Application path: ${{ matrix.applicationPath }}"
#           echo "Services: ${{ matrix.services }}"
#           echo "Has docker-compose: ${{ matrix.hasDockerCompose }}"
# ```
#
# This workflow is primarily used for CI/CD pipelines to conditionally run tests and
# verification steps based on which files have changed in a pull request or commit.

---
name: Matrix Folder Check

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      displayName:
        description: 'Display name for the job'
        required: false
        default: 'Check for changes in src directory'
        type: string
      includeIaCFolders:
        description: 'Whether to include all Infrastructure as Code folders for a complete run'
        required: false
        default: false
        type: boolean
      includeApplications:
        description: 'Whether to include all application folders for complete builds'
        required: false
        default: false
        type: boolean
    outputs:
      # Backward compatibility outputs with legacy names
      changesInRpEnablementShell:
        description: 'Whether shell scripts in subscription setup have changed'
        value: ${{ jobs.map-outputs.outputs.changesInRpEnablementShell }}
      changesInRpEnablementPwsh:
        description: 'Whether PowerShell scripts in subscription setup have changed'
        value: ${{ jobs.map-outputs.outputs.changesInRpEnablementPwsh }}
      changesInTfInstall:
        description: 'Whether any Terraform files have changed'
        value: ${{ jobs.map-outputs.outputs.changesInTfInstall }}
      changedTfFolders:
        description: 'JSON matrix of Terraform folders that have changed'
        value: ${{ jobs.map-outputs.outputs.changedTfFolders }}
      changesInBicepInstall:
        description: 'Whether any Bicep files have changed'
        value: ${{ jobs.map-outputs.outputs.changesInBicepInstall }}
      changedBicepFolders:
        description: 'JSON matrix of Bicep folders that have changed'
        value: ${{ jobs.map-outputs.outputs.changedBicepFolders }}
      changesInApplications:
        description: 'Whether any Application folders have changed'
        value: ${{ jobs.map-outputs.outputs.changesInApplications }}
      changedApplicationFolders:
        description: 'JSON matrix of Application folders that have changed'
        value: ${{ jobs.map-outputs.outputs.changedApplicationFolders }}

permissions:
  contents: read          # Read repository contents and git history for change detection
  actions: read           # Read workflow run information

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      shellChanges: ${{ steps.detect.outputs.shellChanges }}
      powershellChanges: ${{ steps.detect.outputs.powershellChanges }}
      changesInTerraformInstall: ${{ steps.detect.outputs.changesInTerraformInstall }}
      changedTfFolders: ${{ steps.detect.outputs.changedTfFolders }}
      changesInBicepInstall: ${{ steps.detect.outputs.changesInBicepInstall }}
      changedBicepFolders: ${{ steps.detect.outputs.changedBicepFolders }}
      changesInApplications: ${{ steps.detect.outputs.changesInApplications }}
      changedApplicationFolders: ${{ steps.detect.outputs.changedApplicationFolders }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          fetch-depth: 0  # Needed to get all history for comparing changes

      - name: Install PowerShell
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: ${{ inputs.displayName }}
        id: detect
        shell: pwsh
        run: |
          # Build parameters for the PowerShell script
          $scriptArgs = @()

          if ("${{ inputs.includeIaCFolders }}" -eq 'true') {
            $scriptArgs += '-IncludeIaCFolders'
          }

          if ("${{ inputs.includeApplications }}" -eq 'true') {
            $scriptArgs += '-IncludeApplications'
          }

          Write-Host "Running folder change detection with parameters: $($scriptArgs -join ' ')"

          # Execute the PowerShell script with appropriate parameters
          $result = & ./scripts/build/Detect-Folder-Changes.ps1 @scriptArgs

          # Parse the JSON output
          $jsonData = $result | ConvertFrom-Json

          # Set GitHub Actions outputs based on the detection results
          "shellChanges=$($jsonData.subscription.shell_changes)" >> $env:GITHUB_OUTPUT
          "powershellChanges=$($jsonData.subscription.powershell_changes)" >> $env:GITHUB_OUTPUT
          "changesInTerraformInstall=$($jsonData.terraform.has_changes)" >> $env:GITHUB_OUTPUT
          "changedTfFolders=$($jsonData.terraform.folders | ConvertTo-Json -Compress)" >> $env:GITHUB_OUTPUT
          "changesInBicepInstall=$($jsonData.bicep.has_changes)" >> $env:GITHUB_OUTPUT
          "changedBicepFolders=$($jsonData.bicep.folders | ConvertTo-Json -Compress)" >> $env:GITHUB_OUTPUT
          "changesInApplications=$($jsonData.applications.has_changes)" >> $env:GITHUB_OUTPUT
          "changedApplicationFolders=$($jsonData.applications.folders | ConvertTo-Json -Compress)" >> $env:GITHUB_OUTPUT

          # Display results for debugging
          Write-Host "Detection results:"
          Write-Host "Shell changes: $($jsonData.subscription.shell_changes)"
          Write-Host "PowerShell changes: $($jsonData.subscription.powershell_changes)"
          Write-Host "Terraform changes: $($jsonData.terraform.has_changes)"
          Write-Host "Terraform folders: $($jsonData.terraform.folders | ConvertTo-Json)"
          Write-Host "Bicep changes: $($jsonData.bicep.has_changes)"
          Write-Host "Bicep folders: $($jsonData.bicep.folders | ConvertTo-Json)"
          Write-Host "Application changes: $($jsonData.applications.has_changes)"
          Write-Host "Application folders: $($jsonData.applications.folders | ConvertTo-Json)"

  # Map outputs from the detection job to maintain backward compatibility
  map-outputs:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      changesInRpEnablementShell: ${{ needs.detect-changes.outputs.shellChanges }}
      changesInRpEnablementPwsh: ${{ needs.detect-changes.outputs.powershellChanges }}
      changesInTfInstall: ${{ needs.detect-changes.outputs.changesInTerraformInstall }}
      changedTfFolders: ${{ needs.detect-changes.outputs.changedTfFolders }}
      changesInBicepInstall: ${{ needs.detect-changes.outputs.changesInBicepInstall }}
      changedBicepFolders: ${{ needs.detect-changes.outputs.changedBicepFolders }}
      changesInApplications: ${{ needs.detect-changes.outputs.changesInApplications }}
      changedApplicationFolders: ${{ needs.detect-changes.outputs.changedApplicationFolders }}
    steps:
      - name: Map outputs for backward compatibility
        run: echo "Mapping outputs from detection job for backward compatibility"
