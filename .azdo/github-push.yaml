# GitHub sync pipeline
---
trigger: none
variables:
  - group: 'ai-on-edge-secrets'
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/feat/gh-push')]
pool:
  name: ai-on-edge-managed-pool
  vmImage: ubuntu-latest
stages:
  - stage: Main
    displayName: AzDO to GitHub
    jobs:
      - job: "GitHubPush"
        displayName: "Updating GitHub repo from AzDO"
        steps:
          # Checkout repo
          - checkout: self
            fetchDepth: "0"
            clean: true

          # Create GitHub access token
          - bash: |
              echo "Generating Github JWT Token"
              echo "$(github-app-private-key)" > ./github-app-private-key.pem
              token=$(bash $(System.DefaultWorkingDirectory)/scripts/github/jwt-token.sh $(github-app-client-id) ./github-app-private-key.pem)

              echo "Generating Github Access Tokens Url"
              url=$(bash $(System.DefaultWorkingDirectory)/scripts/github/access-tokens-url.sh $token)

              echo "Generating Github Installation Token"
              installationToken=$(bash $(System.DefaultWorkingDirectory)/scripts/github/installation-token.sh $token $url)
              echo "##vso[task.setvariable variable=installationToken]$installationToken";
            displayName: "Create GitHub access token"
            name: githubToken

          # Push to GitHub
          - bash: |
              echo "Pushing to GitHub"
              remoteUrl=$(echo $(githubRepoUrl) | sed "s|__token__|$(installationToken)|g")
              echo "Remote URL: $remoteUrl"
              git checkout -b $(Build.SourceBranch)
              git remote remove origin
              git remote add origin $remoteUrl
              git push --force origin $(Build.SourceBranch):azdo-$(Build.BuildId)
              git remote remove origin
              echo "Pushed branch azdo-$(Build.BuildId) to GitHub"
            displayName: "Push to GitHub"
            name: githubPush

          # Create GitHub PR
          - bash: |
              echo "Creating PR"
              bash $(System.DefaultWorkingDirectory)/scripts/github/create-pr.sh $(installationToken) azdo-$(Build.BuildId) $(Build.SourceVersionMessage)
            displayName: "Create GitHub PR"
            name: githubPR

      - job: "Versioning"
        displayName: "Updating Version based on Git Tag"
        dependsOn: GitHubPull
        condition: eq(variables.isMain, true)
        steps:
          # Checkout repo
          - checkout: self
            fetchDepth: "0"
            clean: true

          # Install GitVersion
          - task: gitversion/setup@3
            name: installGitVersion
            displayName: Install GitVersion
            inputs:
              versionSpec: '5.x'

          # Determine Version
          - task: gitversion/execute@3
            name: executeGitVersion
            displayName: Determine Version
            inputs:
              useConfigFile: true
              configFilePath: ./GitVersion.yml

          # Create Git Tag
          - bash: |
              git tag $(GitVersion_MajorMinorPatch)
            displayName: Create git tag
            name: createGitTag

          # Push Git Tag
          - bash: |
              git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(GitVersion_MajorMinorPatch)
            displayName: Push git tag
            name: pushGitTag
