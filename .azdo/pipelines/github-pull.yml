# GitHub Pull Template
#
# Purpose:
# This template defines a job for pulling content from GitHub repositories into the Azure DevOps
# repository. It's used to fetch public repository changes and ensure internal
# and external versions of this project stay in sync.
#
# When to use:
# - When your pipeline needs to access code from public GitHub repositories
# - When you need to clone specific branches, tags, or commits from external repositories
# - When integrating open-source components that are maintained in GitHub
#
# Functionality:
# - Clones specified GitHub repositories to the pipeline workspace
# - Supports configuring specific branches, tags, or commit SHAs
# - Can be configured to authenticate with private repositories when needed
# - Maintains repository structure for downstream pipeline steps
#
# Key Parameters:
# - repoUrl: The GitHub repository URL to pull from
# - targetPath: Where to clone the repository in the workspace
# - branch/tag/ref: Which version of the repository to pull
# - auth: Authentication details for private repositories (if needed)

# GitHub sync pipeline
---
trigger: none
parameters:
  - name: sourceBranch
    type: string
    default: 'main'
    values:
      - 'main'
      - 'pre-release'
variables:
  - group: 'ai-on-edge-secrets'
pool:
  name: ai-on-edge-managed-pool
  vmImage: ubuntu-latest
stages:
  - stage: Main
    displayName: GitHub to AzDO
    jobs:
      - job: "GitHubPull"
        displayName: "Updating AzDO repo from GitHub"
        steps:
          # Checkout repo
          - checkout: self
            clean: true

          # Create GitHub access token
          - bash: |
              githubAppClientId=$(echo $(github-edge-ai-app-client-id))
              echo "$(github-edge-ai-app-private-key)" > ./github-app-private-key.pem

              echo "Generating Github JWT Token"
              token=$(bash $(System.DefaultWorkingDirectory)/scripts/github/jwt-token.sh $githubAppClientId ./github-app-private-key.pem)

              echo "Generating Github Access Tokens Url"
              repo_path=$(echo $(github-edge-ai-repo-url) | sed -n 's|.*github.com/\([^/][^/]*/[^/][^/]*\)/$|\1|p')
              echo "Repo Path: $repo_path"
              url=$(bash $(System.DefaultWorkingDirectory)/scripts/github/access-tokens-url.sh $token $repo_path)
              echo "Access Tokens URL: $url"

              echo "Generating Github Installation Token"
              installationToken=$(bash $(System.DefaultWorkingDirectory)/scripts/github/installation-token.sh $token $url)
              echo "##vso[task.setvariable variable=installationToken]$installationToken";

            displayName: "Create GitHub access token"
            name: githubToken

          # Clone GitHub repo
          - bash: |
              githubUrl=$(github-edge-ai-repo-url)

              remoteUrl=$(echo $githubUrl | sed "s|__token__|$(installationToken)|g")
              git clone $remoteUrl

              cd edge-ai

              git remote remove origin
              git remote add origin $(azdo-edge-ai-repo-url)
              echo "Fetching changes from GitHub"
              git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" fetch origin ${{ parameters.sourceBranch }}

            displayName: "Pull from GitHub"
            name: githubPull

          # Create AzDO branch and PR if changes detected
          - bash: |
              cd edge-ai

              # echo "run git diff"
              # changedFiles=$(git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" diff --name-only origin/${{ parameters.sourceBranch }}...HEAD)
              # if [[ -z "$changedFiles" ]]; then
              #   echo "No files changed - no sync required"
              #   exit 0
              # fi

              echo "GitHub has new changes"
              echo "Creating new branch github-${{ parameters.sourceBranch }}-$(Build.BuildId)"
              git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push --force origin ${{ parameters.sourceBranch }}:github-${{ parameters.sourceBranch }}-$(Build.BuildId)

              echo "Creating PR"
              export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken)
              az repos pr create --repository "edge-ai" --source-branch "github-${{ parameters.sourceBranch }}-$(Build.BuildId)" --target-branch "${{ parameters.sourceBranch }}" --title "GitHub merge for branch github-${{ parameters.sourceBranch }}-$(Build.BuildId)" --description "Sync from Git Hub - edge-ai repo"

            displayName: "Create AzDO branch and PR"
            name: azdoPR
