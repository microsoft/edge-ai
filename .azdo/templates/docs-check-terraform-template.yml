# Terraform Documentation Compliance Check Template
#
# Purpose:
# This template validates that all Terraform documentation is properly maintained and up-to-date with the code.
# It enforces documentation standards and helps ensure consistent documentation across the codebase.
#
# Checks performed:
# 1. Verifies Terraform module documentation is current using terraform-docs
#
# Note: Language path segment checking (en-us) is now performed by docs-validation-template.yml
# for all documentation across the repository.
#
# Usage:
# Include this template in your Azure DevOps pipeline to automate documentation compliance checks.
# Set breakBuild=true to enforce documentation standards by failing the build when issues are found.
---
parameters:
  # Dependencies for this job
  - name: dependsOn
    type: object
    default: []
  # Display name for the job
  - name: displayName
    type: string
    default: 'Terraform Documentation Check'
  # Condition for when this job should run
  - name: condition
    type: string
    default: 'succeeded()'
  # Version of terraform-docs to install
  - name: terraformDocsVersion
    type: string
    default: 'v0.20.0'
  # Whether to break the build on validation issues (true) or just show warnings (false)
  - name: breakBuild
    type: boolean
    default: false
  # Agent pool configuration
  - name: agentPool
    type: object
    default:
      name: 'ai-on-edge-managed-pool'
      vmImage: 'ubuntu-latest'

jobs:
  - job: DocsCheckTerraform
    displayName: ${{ parameters.displayName }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: ${{ parameters.condition }}
    pool: ${{ parameters.agentPool }}

    steps:

      # Checkout repo
      - checkout: self
        clean: true

      # Set up PowerShell
      - task: PowerShell@2
        displayName: "Verify PowerShell Installation"
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
            Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)"

      # Install terraform-docs using the shared script with new parameter format
      - bash: |
          ./scripts/install-terraform-docs.sh -v "${{ parameters.terraformDocsVersion }}"
        displayName: Install terraform-docs
        condition: and( not(failed()), not(canceled()) )

      # Check for terraform docs changes
      - bash: |

          # Call tf-docs-check.sh script to check for changes
          readme_changed=$(tail -n 1 $(System.DefaultWorkingDirectory)/scripts/tf-docs-check.sh)

          # Check if there are any changes in the Terraform documentation
          if [ "$readme_changed" = true ]; then
            echo "Updates are required for Terraform documentation."
            echo "Please go into the project's scripts directory, run the update-all-terraform-docs.sh script, and commit changes."

            if [[ "$(echo ${{ parameters.breakBuild }} | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
              issue_type="error"
            else
              issue_type="warning"
            fi

            echo "##vso[task.logissue type=$issue_type]Terraform auto-gen documentation needs to be updated. Please run the update-all-terraform-docs.sh script and commit the changes."
            exit 1
          else
            echo "No updates detected in the Terraform documentation."
          fi

        displayName: Check for changes in terraform docs
        workingDirectory: $(System.DefaultWorkingDirectory)
        condition: and( not(failed()), not(canceled()) )
