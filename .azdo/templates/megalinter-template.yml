# MegaLinter Template
#
# Purpose:
# This template integrates MegaLinter into the pipeline to perform comprehensive code quality
# checks across multiple languages and file types, ensuring consistent code standards throughout
# the repository.
#
# Functionality:
# - Restores MegaLinter from cache or pulls it from Docker registry
# - Executes MegaLinter against the codebase with customizable configurations
# - Optionally posts comments on pull requests with linting results
# - Publishes linting reports as pipeline artifacts
#
# Parameters:
# - dependsOn: Jobs that this job depends on
# - displayName: Display name for this job
# - condition: Condition for running this job
# - megalinterCachePath: Path to the MegaLinter cache
# - enableAzureReporter: When true, posts results as comments on Azure DevOps PRs
# - pullRequestId: ID of the pull request (required for PR comments)
# - sourceRepoUri: URI of the source repository (required for PR comments)
#
# Usage Examples:
# ```yaml
# # Basic usage:
# - template: .azdo/templates/megalinter-template.yml
#   parameters:
#     dependsOn: PreviousJob
#
# # With PR commenting enabled:
# - template: .azdo/templates/megalinter-template.yml
#   parameters:
#     enableAzureReporter: true
#     pullRequestId: $(System.PullRequest.PullRequestId)
#     sourceRepoUri: $(System.PullRequest.SourceRepositoryURI)
# ```
#
# MegaLinter provides a unified approach to code quality by running multiple linters
# in parallel, significantly improving code quality and consistency across the project.
---
parameters:
  # Dependencies for this job
  - name: dependsOn
    type: object
    default: []
  # Display name for the job
  - name: displayName
    type: string
    default: 'Run MegaLinter'
  # Condition for when to run this job
  - name: condition
    type: string
    default: succeeded()
  # Path to the MegaLinter cache
  - name: megalinterCachePath
    type: string
    default: '/mnt/storage/sdc/cache/images/megalinter'
  # Enable or disable Azure Reporter
  - name: enableAzureReporter
    type: boolean
    default: false
  # ID of the pull request
  - name: pullRequestId
    type: string
    default: ''
  # URI of the source repository
  - name: sourceRepoUri
    type: string
    default: ''

jobs:
  - job: MegaLinter
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.displayName }}
    condition: ${{ parameters.condition }}
    pool:
      name: ai-on-edge-managed-pool
      vmImage: ubuntu-latest
      demands:
        - WorkFolder -equals /mnt/storage/sdc/megalinter/

    steps:
      # Checkout repo
      - checkout: self
        clean: true

      # Attempt to restore MegaLinter from the cache otherwise pull it
      - script: |

          # Check if the cache directory exists
          if [ -d "${{ parameters.megalinterCachePath }}" ]; then
            # Check if the cache file exists
            if [ -f "${{ parameters.megalinterCachePath }}/megalinterv8-cache.tar" ]; then
              echo "Loading MegaLinter from cache..."
              docker load -i ${{ parameters.megalinterCachePath }}/megalinterv8-cache.tar
            # If the cache file does not exist, pull the MegaLinter image
            else
              echo "Megalinter cache not found. Pulling MegaLinter from Docker registry..."
              docker pull oxsecurity/megalinter:v8
            fi
          else
            echo "Cache directory ${{ parameters.megalinterCachePath }} does not exist. Pulling MegaLinter from Docker registry..."
            docker pull oxsecurity/megalinter:v8
          fi

        displayName: MegaLinter Cache Restore
        condition: not(canceled())

      # Run MegaLinter with different configurations based on Azure Reporter setting
      - ${{ if eq(parameters.enableAzureReporter, true) }}:
          - script: |

              docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \
                --env-file <(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \
                -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \
                -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \
                -e SYSTEM_COLLECTIONURI='$(System.CollectionUri)' \
                -e SYSTEM_PULLREQUEST_PULLREQUESTID='${{ parameters.pullRequestId }}' \
                -e SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI='${{ parameters.sourceRepoUri }}' \
                -e SYSTEM_TEAMPROJECT='$(System.TeamProject)' \
                -e BUILD_BUILDID='$(Build.BuildId)' \
                -e BUILD_REPOSITORY_ID='$(Build.Repository.ID)' \
                -e AZURE_COMMENT_REPORTER='true' \
                oxsecurity/megalinter:v8

            displayName: Run MegaLinter

      - ${{ if eq(parameters.enableAzureReporter, false) }}:
          - script: |

              docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \
                --env-file <(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \
                -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \
                -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \
                -e AZURE_COMMENT_REPORTER='false' \
                oxsecurity/megalinter:v8

            displayName: Run MegaLinter

      # Upload MegaLinter reports as artifacts
      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        displayName: Upload MegaLinter reports
        inputs:
          targetPath: "$(System.DefaultWorkingDirectory)/megalinter-reports/"
          artifactName: MegaLinterReport

  # Cleanup job to remove files in /mnt/storage/sdc/ except for the MegaLinter cache tar file
  - job: CleanupStorage
    dependsOn: MegaLinter
    displayName: 'Clean up Storage Directory'
    condition: always()
    pool:
      name: ai-on-edge-managed-pool
      vmImage: ubuntu-latest
      demands:
        - WorkFolder -equals /mnt/storage/sdc/
    steps:
      - script: |

          echo "=== Storage Metrics Before Cleanup ==="
          echo "Total disk space:"
          df -h /mnt/storage/sdc
          echo "MegaLinter directory size:"
          du -sh /mnt/storage/sdc/megalinter 2>/dev/null || echo "Directory not found"
          echo "Cache directory size:"
          du -sh ${{ parameters.megalinterCachePath }} 2>/dev/null || echo "Directory not found"

          echo "=== Starting Cleanup ==="

          # Ensure the cache directory exists
          mkdir -p ${{ parameters.megalinterCachePath }}

          # Clean up the megalinter directory but preserve the cache
          if [ -d "/mnt/storage/sdc/megalinter" ]; then
            find /mnt/storage/sdc/megalinter -mindepth 1 -not -path "${{ parameters.megalinterCachePath }}*" -exec rm -rf {} \; 2>/dev/null || true
            echo "Removed all files in /mnt/storage/sdc/megalinter except cache"
          else
            echo "MegaLinter directory does not exist, nothing to clean"
          fi

          # Make sure we don't have excessive cache files
          if [ -d "${{ parameters.megalinterCachePath }}" ]; then
            # Keep only the latest megalinter cache file
            find ${{ parameters.megalinterCachePath }} -type f -not -name "megalinterv8-cache.tar" -delete 2>/dev/null || true
            echo "Removed old cache files"
          fi

          echo "=== Storage Metrics After Cleanup ==="
          echo "Total disk space:"
          df -h /mnt/storage/sdc
          echo "MegaLinter directory size:"
          du -sh /mnt/storage/sdc/megalinter 2>/dev/null || echo "Directory not found"
          echo "Cache directory size:"
          du -sh ${{ parameters.megalinterCachePath }} 2>/dev/null || echo "Directory not found"

          echo "=== Cleanup Complete ==="
        displayName: 'Collect Metrics and Clean MegaLinter Storage'
        condition: not(canceled())
