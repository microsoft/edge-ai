# Matrix Folder Check Template
#
# Purpose:
# This template detects changes in the repository's directory structure and creates
# dynamic outputs that drive conditional execution in downstream jobs. It determines which
# components have been modified and need testing.
#
# Functionality:
# - Detects changes in shell scripts (.sh) in the subscription setup folder
# - Detects changes in PowerShell scripts (.ps1) in the subscription setup folder
# - Creates a dynamic matrix of Terraform folders that have changed
# - Creates a dynamic matrix of Bicep folders that have changed
# - Optionally can return all folders containing Terraform or Bicep files, not just those with changes
# - Uses the detect-folder-changes.sh script to efficiently identify changes
#
# Parameters:
# - dependsOn: Jobs that this job depends on
# - displayName: Display name for this job
# - condition: Condition for running this job
# - includeAllFolders: When true, returns all folders containing Terraform and Bicep files
#
# Output Variables:
# - matrixBuildFolderCheckTask.changesInRpEnablementShell: true/false if shell scripts changed in subscription setup
# - matrixBuildFolderCheckTask.changesInRpEnablementPwsh: true/false if PowerShell scripts changed in subscription setup
# - matrixBuildFolderCheckTask.changesInTfInstall: true/false if any Terraform files changed
# - matrixBuildFolderCheckTask.changedTFFolders: JSON object with Terraform folder names (changed or all depending on parameters)
# - matrixBuildFolderCheckTask.changesInBicepInstall: true/false if any Bicep files changed
# - matrixBuildFolderCheckTask.changedBicepFolders: JSON object with Bicep folder names (changed or all depending on parameters)
#
# Usage Examples:
# ```yaml
# # To check only for folders with changes:
# - template: .azdo/matrix-folder-check-template.yml
#   parameters:
#     dependsOn: PreviousJob
#     displayName: "Check for component changes"
#     condition: succeeded()
#
# # To include all folders containing Terraform and Bicep files:
# - template: .azdo/matrix-folder-check-template.yml
#   parameters:
#     dependsOn: PreviousJob
#     displayName: "Check all component folders"
#     includeAllFolders: true
#
# The output of this template is used by downstream jobs to conditionally run tests only
# on components that have changed (or all components when includeAllFolders is true),
# improving pipeline efficiency.
---
parameters:
  # Job name for this instance of the template
  - name: jobName
    type: string
    default: 'MatrixBuildFolderCheck'  # Default for backward compatibility
  # Dependencies for this job
  - name: dependsOn
    type: object
    default: []
  # Display name for the job
  - name: displayName
    type: string
    default: 'Check for changes in src directory'
  # Condition for when to run this job
  - name: condition
    type: string
    default: succeeded()
  # Whether to include all folders for a complete Terraform run
  # This is useful for testing all Terraform files in the src directory
  # regardless of whether they have changed or not, e.g. Scheduled Builds
  - name: includeAllFolders
    type: boolean
    default: false

jobs:
  - job: ${{ parameters.jobName }}
    displayName: ${{ parameters.displayName }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: ${{ parameters.condition }}
    pool:
      name: ai-on-edge-managed-pool
      vmImage: ubuntu-latest
    steps:
      # Checkout repo and set fetchDepth to 0 to get all history
      - checkout: self
        fetchDepth: "0"
        clean: true

      # Use the detect-folder-changes.sh script instead of inline bash
      - bash: |
          # Echo parameters for debugging
          echo "Debug: includeAllFolders = ${{ parameters.includeAllFolders }}"

          # Initialize parameters string
          params=""

          # Add parameters based on conditions
          if [[ "$(echo ${{ parameters.includeAllFolders }} | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            echo "Debug: Adding --include-all-folders parameter"
            params="--include-all-folders"
          fi

          # Log the parameters
          echo "Debug: Final parameters = [$params]"
          echo "Running detect-folder-changes.sh with parameters: $params"

          # Run the script and capture its JSON output
          script_output=$(bash ./scripts/build/detect-folder-changes.sh $params)
          echo "Script completed successfully"

          # Echo the raw script output for debugging
          echo "======== RAW SCRIPT OUTPUT ========"
          echo "$script_output"
          echo "======== END RAW SCRIPT OUTPUT ========"

          # Parse the JSON output using jq and set pipeline variables
          shell_changes=$(echo "$script_output" | jq -r '.subscription.shell_changes')
          pwsh_changes=$(echo "$script_output" | jq -r '.subscription.powershell_changes')
          tf_has_changes=$(echo "$script_output" | jq -r '.terraform.has_changes')
          tf_folders=$(echo "$script_output" | jq -c '.terraform.folders')
          bicep_has_changes=$(echo "$script_output" | jq -r '.bicep.has_changes')
          bicep_folders=$(echo "$script_output" | jq -c '.bicep.folders')

          # Echo folders objects directly for debugging
          echo "======== TERRAFORM FOLDERS ========"
          echo "$tf_folders"
          echo "======== END TERRAFORM FOLDERS ========"

          echo "======== BICEP FOLDERS ========"
          echo "$bicep_folders"
          echo "======== END BICEP FOLDERS ========"

          # Set output variables for downstream jobs
          echo "##vso[task.setvariable variable=changesInRpEnablementShell;isOutput=true]$shell_changes"
          echo "##vso[task.setvariable variable=changesInRpEnablementPwsh;isOutput=true]$pwsh_changes"
          echo "##vso[task.setvariable variable=changesInTfInstall;isOutput=true]$tf_has_changes"
          echo "##vso[task.setvariable variable=changesInBicepInstall;isOutput=true]$bicep_has_changes"

          # Set the terraform folders output (will be 'none' if no changes)
          if [ "$tf_has_changes" = "true" ]; then
            echo "Changes detected in Terraform folders"
            echo "##vso[task.setvariable variable=changedTfFolders;isOutput=true]$tf_folders"
          else
            echo "No changes detected in Terraform folders"
            echo "##vso[task.setvariable variable=changedTfFolders;isOutput=true]none"
          fi

          # Set the bicep folders output (will be 'none' if no changes)
          if [ "$bicep_has_changes" = "true" ]; then
            echo "Changes detected in Bicep folders"
            echo "##vso[task.setvariable variable=changedBicepFolders;isOutput=true]$bicep_folders"
          else
            echo "No changes detected in Bicep folders"
            echo "##vso[task.setvariable variable=changedBicepFolders;isOutput=true]none"
          fi

        displayName: Check for changes in src folders
        name: matrixBuildFolderCheckTask
