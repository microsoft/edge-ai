# Bicep Documentation Compliance Check Template
#
# Purpose:
# This template validates that all Bicep documentation is properly maintained and up-to-date with the code.
# It enforces documentation standards and helps ensure consistent documentation across the codebase.
#
# Checks performed:
# 1. Verifies Bicep module documentation is current using custom documentation generator
# 2. Ensures links in documentation don't contain language-specific paths (e.g., 'en-us')
#
# Usage:
# Include this template in your Azure DevOps pipeline to automate documentation compliance checks.
# Set breakBuild=true to enforce documentation standards by failing the build when issues are found.
---
parameters:
  # Dependencies for this job
  - name: dependsOn
    type: object
    default: []
  # Display name for the job
  - name: displayName
    type: string
    default: 'Bicep Documentation Check'
  # Condition for when this job should run
  - name: condition
    type: string
    default: 'succeeded()'
  # Whether to break the build on compliance issues (true) or just show warnings (false)
  - name: breakBuild
    type: boolean
    default: false
  # Pool configuration
  - name: pool
    type: object
    default:
      name: 'ai-on-edge-managed-pool'
      vmImage: 'ubuntu-latest'

jobs:
  - job: DocsCheckBicep
    displayName: ${{ parameters.displayName }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: ${{ parameters.condition }}
    pool: ${{ parameters.pool }}

    steps:

      # Checkout repo
      - checkout: self
        clean: true

      # Set up Python environment
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.11'
          addToPath: true
        displayName: "Setup Python 3.11"

      # Install required Python packages
      - bash: |
          # Install dependencies from requirements.txt if it exists
          if [ -f ./requirements.txt ]; then
            python -m pip install --upgrade pip
            pip install -r ./requirements.txt
          else
            # Fallback to installing just what's needed
            pip install requests jinja2
          fi
        displayName: "Install Python Dependencies"
        condition: and( not(failed()), not(canceled()) )

      # Verify Azure CLI with Bicep extension
      - bash: |
          # Check if Azure CLI is installed
          if ! command -v az &>/dev/null; then
            echo "Azure CLI is not installed. Installing now..."
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi

          # Install/update Bicep extension
          echo "Installing/updating Bicep extension..."
          az bicep install
          az bicep version
        displayName: "Verify Azure CLI with Bicep Extension"
        condition: and( not(failed()), not(canceled()) )

      # Check for Bicep docs changes
      - bash: |
          # Run the bicep-docs-check.sh script to check for changes
          ./scripts/bicep-docs-check.sh
          docs_changed=$(tail -n 1 <($(System.DefaultWorkingDirectory)/scripts/bicep-docs-check.sh))

          # Check if there are any changes in the Bicep documentation
          if [ "$docs_changed" = true ]; then
            echo "Updates are required for Bicep documentation."
            echo "Please go into the project's scripts directory, run the update-all-bicep-docs.sh script and commit changes."

            if [[ "$(echo ${{ parameters.breakBuild }} | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
              issue_type="error"
            else
              issue_type="warning"
            fi

            echo "##vso[task.logissue type=$issue_type]Bicep auto-gen documentation needs to be updated. Please run the scripts/update-all-bicep-docs.sh script and commit the changes."
            exit 1
          else
            echo "No updates detected in the Bicep documentation."
          fi
        displayName: "Check for changes in Bicep docs"
        workingDirectory: $(System.DefaultWorkingDirectory)
        condition: and( not(failed()), not(canceled()) )

      # Check for en-us links in docs
      - bash: |
          # Run the link-lang-check.py script to find en-us URLs
          echo "Checking for language path segments (en-us) in links..."
          links_json=$(python3 $(System.DefaultWorkingDirectory)/scripts/link-lang-check.py)

          # Check if we got valid JSON results
          if echo "$links_json" | jq empty 2>/dev/null; then
            # Count the number of links found
            link_count=$(echo "$links_json" | jq '. | length')

            if [ "$link_count" -gt 0 ]; then
              echo "Found $link_count URLs with language path segments (en-us)."

              # Loop through each link and create a build warning
              echo "$links_json" | jq -c '.[]' | while read -r link; do
                file=$(echo "$link" | jq -r '.file')
                line=$(echo "$link" | jq -r '.line_number')
                url=$(echo "$link" | jq -r '.original_url')

                # Create a warning for each link
                if [[ "${{ parameters.breakBuild }}" == "true" ]]; then
                  issue_type="error"
                else
                  issue_type="warning"
                fi

                echo "##vso[task.logissue type=$issue_type;sourcepath=$file;linenumber=$line;]URL contains language path segment (en-us): $url"
              done

            else
              echo "No URLs with language path segments (en-us) found."
            fi
          else
            echo "Error parsing output from link-lang-check.py script"
            echo "$links_json"
          fi
        displayName: "Check for language path segments in links"
        workingDirectory: $(System.DefaultWorkingDirectory)
        condition: and( not(failed()), not(canceled()) )
