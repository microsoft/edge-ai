# Network Egress Monitoring Template
#
# Purpose:
# Monitors and controls network egress traffic from Azure DevOps build agents
# to ensure compliance with security policies and prevent data exfiltration.
#
# Single Responsibility:
# - Network egress monitoring and filtering only
# - No other security functions (dependency scanning, OSSF analysis, etc.)
#
# Parameters:
# - allowedEndpoints: Comma-separated list of allowed network endpoints
# - enableEgressFilter: Enable network egress filtering
# - monitorDurationMinutes: Duration to monitor network traffic
# - outputPath: File path for egress monitoring report output
# - workingDirectory: Working directory for monitoring
# - continueOnError: Continue pipeline on monitoring errors
# - dependsOn: Jobs that this job depends on
# - condition: Condition for running this job
# - agentPool: Agent pool configuration
#
# Usage Examples:
# - template: .azdo/templates/egress-monitoring-template.yml
#   parameters:
#     allowedEndpoints: 'github.com,registry-1.docker.io,*.azurecr.io'
#     enableEgressFilter: true
#
# This template provides focused network egress monitoring for build security.
---
parameters:
  - name: allowedEndpoints
    type: string
    default: 'github.com,registry-1.docker.io,*.azurecr.io,packages.microsoft.com'
    displayName: 'Comma-separated list of allowed network endpoints'
  - name: enableEgressFilter
    type: boolean
    default: true
    displayName: 'Enable network egress filtering'
  - name: monitorDurationMinutes
    type: number
    default: 5
    displayName: 'Duration to monitor network traffic in minutes'
  - name: outputPath
    type: string
    default: '$(Build.ArtifactStagingDirectory)/egress-monitoring.json'
    displayName: 'File path for egress monitoring report output'
  - name: workingDirectory
    type: string
    default: '$(Build.SourcesDirectory)'
    displayName: 'Working directory for monitoring'
  - name: continueOnError
    type: boolean
    default: true
    displayName: 'Continue pipeline on monitoring errors'
  - name: dependsOn
    type: object
    default: []
    displayName: 'Jobs that this job depends on'
  - name: displayName
    type: string
    default: 'Network Egress Monitoring'
    displayName: 'Display name for this job'
  - name: condition
    type: string
    default: 'succeeded()'
    displayName: 'Condition for running this job'
  - name: agentPool
    type: object
    default:
      name: 'ai-on-edge-managed-pool'
      vmImage: 'ubuntu-latest'
    displayName: 'Agent pool configuration'

jobs:
  - job: NetworkEgressMonitoring
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.displayName }}
    condition: ${{ parameters.condition }}
    pool: ${{ parameters.agentPool }}
    steps:
      - task: PowerShell@2
        displayName: 'Initialize Network Egress Monitoring'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "=== Network Egress Monitoring ===" -ForegroundColor Cyan
            Write-Host "Allowed endpoints: ${{ parameters.allowedEndpoints }}" -ForegroundColor Green
            Write-Host "Egress filtering enabled: ${{ parameters.enableEgressFilter }}" -ForegroundColor Green
            Write-Host "Monitor duration: ${{ parameters.monitorDurationMinutes }} minutes" -ForegroundColor Green
            Write-Host "Output path: ${{ parameters.outputPath }}" -ForegroundColor Green

            # Create output directory if it doesn't exist
            $OutputDir = Split-Path -Parent "${{ parameters.outputPath }}"
            if (!(Test-Path $OutputDir)) {
              New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
              Write-Host "Created output directory: $OutputDir" -ForegroundColor Yellow
            }

      - task: PowerShell@2
        displayName: 'Setup Network Egress Filtering'
        condition: ${{ parameters.enableEgressFilter }}
        continueOnError: ${{ parameters.continueOnError }}
        inputs:
          targetType: 'filePath'
          filePath: '${{ parameters.workingDirectory }}/scripts/security/Initialize-HardenRunner.ps1'
          arguments: >
            -EnableEgressFilter:$true
            -EnableEndpointMonitoring:$true
            -AllowedEndpoints "${{ parameters.allowedEndpoints }}"
            -Verbose
          workingDirectory: '${{ parameters.workingDirectory }}'
          pwsh: true

      - task: PowerShell@2
        displayName: 'Monitor Network Egress Traffic'
        continueOnError: ${{ parameters.continueOnError }}
        inputs:
          targetType: 'filePath'
          filePath: '${{ parameters.workingDirectory }}/scripts/security/Monitor-EgressTraffic.ps1'
          arguments: >
            -AllowedEndpoints "${{ parameters.allowedEndpoints }}"
            -MonitorDurationMinutes ${{ parameters.monitorDurationMinutes }}
            -OutputPath "${{ parameters.outputPath }}"
            -Verbose
          workingDirectory: '${{ parameters.workingDirectory }}'
          pwsh: true

      - task: PowerShell@2
        displayName: 'Analyze Network Egress Results'
        condition: always()
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "=== Network Egress Analysis Results ===" -ForegroundColor Cyan

            $OutputPath = "${{ parameters.outputPath }}"

            if (Test-Path $OutputPath) {
              try {
                $Report = Get-Content $OutputPath | ConvertFrom-Json
                $ViolationCount = ($Report.Violations | Measure-Object).Count
                $AllowedCount = ($Report.AllowedConnections | Measure-Object).Count

                Write-Host "=== Network Traffic Summary ===" -ForegroundColor Cyan
                Write-Host "Allowed connections: $AllowedCount" -ForegroundColor Green
                Write-Host "Policy violations: $ViolationCount" -ForegroundColor $(if ($ViolationCount -eq 0) { "Green" } else { "Red" })
                Write-Host "Monitoring duration: $($Report.MonitorDurationMinutes) minutes" -ForegroundColor Green
                Write-Host "Report generated: $($Report.Timestamp)" -ForegroundColor Green

                if ($ViolationCount -gt 0) {
                  Write-Host "`n=== Policy Violations ===" -ForegroundColor Red
                  foreach ($Violation in $Report.Violations) {
                    Write-Host "##vso[task.logissue type=warning]EGRESS VIOLATION: $($Violation.Destination) - $($Violation.Reason)"
                  }
                  Write-Host "##vso[task.logissue type=warning]Build completed with $ViolationCount network policy violations"
                } else {
                  Write-Host "##vso[task.logissue type=info]No network policy violations detected!"
                }

                # Set pipeline variables for downstream tasks
                Write-Host "##vso[task.setvariable variable=NetworkViolationCount]$ViolationCount"
                Write-Host "##vso[task.setvariable variable=HasNetworkViolations]$($ViolationCount -gt 0)"
                Write-Host "##vso[task.setvariable variable=AllowedConnectionCount]$AllowedCount"

              } catch {
                Write-Host "##vso[task.logissue type=error]Failed to parse network egress report: $($_.Exception.Message)"
              }
            } else {
              Write-Host "##vso[task.logissue type=warning]No network egress report found at: $OutputPath"
            }

      - task: PublishTestResults@2
        displayName: 'Publish Network Egress Test Results'
        condition: always()
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/egress-monitoring.json'
          searchFolder: '$(Build.ArtifactStagingDirectory)'
          mergeTestResults: true
          failTaskOnFailedTests: false
          testRunTitle: 'Network Egress Monitoring'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Network Egress Artifacts'
        condition: always()
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'network-egress-report'
          includeRootFolder: false
          parallel: true
