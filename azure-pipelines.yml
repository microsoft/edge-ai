# Azure DevOps CI/CD Pipeline
#
# Purpose:
# This pipeline automates the build, test, and deployment processes for IaC components,
# ensuring consistent quality and validation before deployment to production environments.
#
# Functionality:
# - Runs on pull requests and commits to main branch
# - Dynamically detects changes and determines which components to validate
# - Executes matrix-based Terraform testing for affected infrastructure components
# - Validates PowerShell and shell scripts for resource provider operations
# - Performs infrastructure validation using custom test harnesses
#
# Parameters:
# - None directly in this file, but parameters are passed to templates
#
# Output Variables:
# - None directly, outputs are managed by individual template stages
#
# Usage Examples:
# This pipeline runs automatically on PR creation and merges to main.
# It can also be manually triggered through the Azure DevOps interface.
#
# This pipeline is the primary CI/CD process for the Edge infrastructure components,
# ensuring quality before any changes reach production environments.

---
trigger:
  branches:
    include:
      - main
      - internal-eng

# Add parameters section for manual trigger option
parameters:
  - name: RunSecurityUpdateScanning
    displayName: 'Run Security and Update Scanning'
    type: boolean
    default: false

schedules:
  - cron: "0 5 * * *"
    displayName: Daily 9 PM PST/5 AM UTC Trigger
    branches:
      include:
        - main
    always: true

# set isMain to true if the branch is main to trigger main stage
# set isScheduled to true if the build is scheduled to trigger
variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]

# Define the default pool for the entire pipeline. This is a
# Managed DevOps Pool with Ubuntu 2022 and WIndows 2022 agents
pool:
  name: ai-on-edge-managed-pool
  vmImage: ubuntu-latest

stages:
  # Daily scheduled build to run security and update scanning
  - stage: Scheduled
    displayName: Security and Updates Scanning
    condition: or(eq(variables.isScheduled, true), eq(${{ parameters.RunSecurityUpdateScanning }}, true))
    jobs:
      # Run Checkov security scanning directly with the PowerShell script approach
      - template: .azdo/templates/checkov-template.yml
        parameters:
          agentPool: 'ubuntu-latest'

      # Use the aio-version-checker-template.yml template for checking AIO component versions
      - template: .azdo/templates/aio-version-checker-template.yml
        parameters:
          dependsOn: []
          displayName: "AIO Version Check"
          condition: succeeded()
          iacType: all  # Check all supported file types (currently only Terraform and Bicep files)
          breakBuild: false  # Only show warnings by default

      # Use the matrix-folder-check-template.yml to check all folders in src directory for scheduled scans
      - template: .azdo/templates/matrix-folder-check-template.yml
        parameters:
          jobName: ScheduledComponentsFolderCheck  # Unique job name for scheduled instance
          dependsOn: []
          displayName: "Check all folders in src directory"
          condition: succeeded()
          includeAllFolders: true  # Check all folders for scheduled builds

      # Use the cluster-test-terraform-template.yml template for Terraform testing in scheduled runs
      - template: .azdo/templates/cluster-test-terraform-template.yml
        parameters:
          dependsOn: ScheduledComponentsFolderCheck
          displayName: "Scheduled Terraform Component Test"
          condition: eq(dependencies.ScheduledComponentsFolderCheck.outputs['matrixBuildFolderCheckTask.changesInTfInstall'], 'true')
          matrixVariable: dependencies.ScheduledComponentsFolderCheck.outputs['matrixBuildFolderCheckTask.changedTfFolders']
          azureServiceConnection: azdo-ai-for-edge-iac-for-edge
          breakBuild: true

  - stage: Main
    displayName: Main Build
    # Run the main build process only if the build is not scheduled and is the main branch
    condition: and(eq(variables.isMain, true), eq(variables.isScheduled, false))
    jobs:
      # Use the megaLinter-template.yml to run MegaLinter
      - template: .azdo/templates/megalinter-template.yml
        parameters:
          displayName: "Run MegaLinter"
          condition: succeeded()
          # for main do not report results as there's no PR to report to
          enableAzureReporter: false

      # Use the wiki-update-template.yml to update the wiki documentation
      # This job will only run if the MegaLinter job passes.
      - template: .azdo/templates/wiki-update-template.yml
        parameters:
          dependsOn: MegaLinter
          displayName: "Wiki Documentation Update"
          condition: succeeded()
          branchRepoFolder: "branch"
          wikiRepoFolder: "wiki"
          wikiRepo: "git://edge-ai/edge-ai@refs/heads/wiki"
          wikiBranch: "wiki"

  - stage: PR
    displayName: PR Build Process
    # Run the PR build process only if the build is not scheduled and not the main branch
    condition: and(eq(variables.isMain, false), eq(variables.isScheduled, false))
    jobs:
      # Use the MegaLinter template for PR builds with Azure reporter enabled
      - template: .azdo/templates/megalinter-template.yml
        parameters:
          dependsOn: []
          displayName: "Run MegaLinter"
          condition: succeeded()
          # for PR builds, enable the Azure reporter to report results
          # to the PR and set the pull request ID and source repo URIs
          enableAzureReporter: true
          pullRequestId: $(System.PullRequest.PullRequestId)
          sourceRepoUri: $(System.PullRequest.SourceRepositoryURI)
      # Use the docs check template for PR builds
      - template: .azdo/templates/docs-check-terraform-template.yml
        parameters:
          dependsOn: MegaLinter
          displayName: "Terraform Documentation Quality Check"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default
      # Use the docs check template for Bicep files
      - template: .azdo/templates/docs-check-bicep-template.yml
        parameters:
          dependsOn: MegaLinter
          displayName: "Bicep Documentation Quality Check"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default
      # Use the matrix-folder-check-template.yml to check for changes in src directory
      - template: .azdo/templates/matrix-folder-check-template.yml
        parameters:
          jobName: ComponentChangesFolderCheck  # Add unique job name for this instance
          dependsOn: [DocsCheckTerraform, DocsCheckBicep]
          displayName: "Check for changes in src directory"
          condition: succeeded()
          includeAllFolders: false  # Only check folders with changes for PR builds
      # Use the resource-provider-pwsh-tests-template.yml template for Resource Provider testing jobs
      - template: .azdo/templates/resource-provider-pwsh-tests-template.yml
        parameters:
          dependsOn: ComponentChangesFolderCheck  # Updated to reference the unique job name
          pwshScriptCondition: eq(dependencies.ComponentChangesFolderCheck.outputs['matrixBuildFolderCheckTask.changesInRpEnablementPwsh'], 'true')
          azureServiceConnection: azdo-ai-for-edge-iac-for-edge
          workingDirectory: $(System.DefaultWorkingDirectory)/src/azure-resource-providers
          pwshTestResultsOutput: $(System.DefaultWorkingDirectory)/PWSH-TEST-RESULTS.xml
      # Use template for Terraform variable compliance checking
      - template: .azdo/templates/variable-compliance-terraform-template.yml
        parameters:
          dependsOn: ComponentChangesFolderCheck  # Updated to reference the unique job name
          displayName: "Check Terraform Variable Consistency"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default
      # Use template for Bicep variable compliance checking
      - template: .azdo/templates/variable-compliance-bicep-template.yml
        parameters:
          dependsOn: ComponentChangesFolderCheck  # Updated to reference the unique job name
          displayName: "Check Bicep Variable Consistency"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default
      # Use the cluster-test-terraform-template.yml template for Terraform testing
      - template: .azdo/templates/cluster-test-terraform-template.yml
        parameters:
          dependsOn: ComponentChangesFolderCheck
          displayName: "Terraform Component Test"
          condition: eq(dependencies.ComponentChangesFolderCheck.outputs['matrixBuildFolderCheckTask.changesInTfInstall'], 'true')
          matrixVariable: dependencies.ComponentChangesFolderCheck.outputs['matrixBuildFolderCheckTask.changedTfFolders']
          azureServiceConnection: azdo-ai-for-edge-iac-for-edge
          breakBuild: true
