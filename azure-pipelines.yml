# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

---
trigger:
  branches:
    include:
      - main

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Main
    displayName: Main Build
    # dependsOn: string | [ string ]
    condition: eq(variables.isMain, true)
    # pool: string | pool
    # variables: { string: string } | [ variable | variableReference ]
    jobs:
      # Run MegaLinter to detect linting and security issues
      - job: MegaLinter
        pool:
          vmImage: ubuntu-latest
        steps:
          # Checkout repo
          - checkout: self

          # Initialize dependency scan and fail the build if it does not pass
          - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
            displayName: 'Component Detection'
            inputs:
              failOnAlert: true

          # Pull MegaLinter docker image
          - script: docker pull oxsecurity/megalinter:v7
            displayName: Pull MegaLinter

          # Run MegaLinter - for the main branch the reporter needs to be disabled
          - script: |
              docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \
                --env-file <(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \
                -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \
                -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \
                -e AZURE_COMMENT_REPORTER='false' \
                oxsecurity/megalinter:v7
            displayName: Run MegaLinter

  - stage: PR
    displayName: PR Build Process
    # dependsOn: string | [ string ]
    condition: eq(variables.isMain, false)
    # pool: string | pool
    # variables: { string: string } | [ variable | variableReference ]
    jobs:
      # Run MegaLinter to detect linting and security issues
      - job: MegaLinter
        pool:
          vmImage: ubuntu-latest
        steps:
          # Checkout repo
          - checkout: self

          # Initialize dependency scan and fail the build if it does not pass
          - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
            displayName: 'Component Detection'
            inputs:
              failOnAlert: true

          # Pull MegaLinter docker image
          - script: docker pull oxsecurity/megalinter:v7
            displayName: Pull MegaLinter

          # Run MegaLinter
          # See here for required system props: https://github.com/oxsecurity/megalinter/blob/0f18f72065ffdeec09b616087b8298a3b13b2dee/megalinter/reporters/AzureCommentReporter.py#L7C1-L13C22
          - script: |
              docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \
                --env-file <(env | grep -e SYSTEM_ -e BUILD_ -e TF_ -e AGENT_) \
                -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \
                -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \
                -e SYSTEM_COLLECTIONURI='$(System.CollectionUri)' \
                -e SYSTEM_PULLREQUEST_PULLREQUESTID='$(System.PullRequest.PullRequestId)' \
                -e SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI='$(System.PullRequest.SourceRepositoryURI)' \
                -e SYSTEM_TEAMPROJECT='$(System.TeamProject)' \
                -e BUILD_BUILDID='$(Build.BuildId)' \
                -e BUILD_REPOSITORY_ID='$(Build.Repository.ID)' \
                -e AZURE_COMMENT_REPORTER='true' \
                oxsecurity/megalinter:v7
            displayName: Run MegaLinter

          # Upload MegaLinter reports
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            displayName: Upload MegaLinter reports
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/megalinter-reports/"
              artifactName: MegaLinterReport
