# IaC for the Edge - Azure DevOps CI/CD Pipeline
# ------------------------------------------------------------------------------
#
# Purpose:
# This pipeline implements the CI/CD process for the Infrastructure as Code (IaC)
# components that deploy and manage edge infrastructure solutions. It validates code
# quality, tests components, and ensures consistency across the codebase.
#
# Pipeline Organization:
# - Scheduled Stage: Updates MegaLinter Docker image cache for improved performance
# - Main Stage: Runs on the main branch for dependency scanning, linting, and wiki updates
# - PR Stage: Executes on pull requests for comprehensive component validation:
#   * Code quality checks (MegaLinter)
#   * Documentation quality verification
#   * Component version validation
#   * IaC module testing based on changed components (or all components when specified)
#   * Terraform variable consistency verification
#
# Key Features:
# - Conditional execution based on detected changes (matrix-folder-check-template.yml)
# - Highly templated pipeline for reusability and maintainability
# - Integration with Azure resources via service connections
#
# See also:
# - Repository documentation: /README.md
# - Blueprint deployment guide: /blueprints/README.md
# - Component structure guide: /src/README.md

---
trigger:
  branches:
    include:
      - main

schedules:
  - cron: "0 5 * * *"
    displayName: Daily 9 PM PST/5 AM UTC Trigger
    branches:
      include:
        - main
    always: true

# set isMain to true if the branch is main to trigger main stage
# set isScheduled to true if the build is scheduled to trigger
# define the Megalinter cache path for the pipeline
variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]
  MegalinterCachePath: "/mnt/storage/sdc/cache/images/megalinter"

# Define the default pool for the entire pipeline. This is a
# Managed DevOps Pool with Ubuntu 2022 and WIndows 2022 agents
pool:
  name: ai-on-edge-managed-pool
  vmImage: ubuntu-latest

stages:
  # Daily scheduled build to update the MegaLinter cache
  - stage: Scheduled
    displayName: Megalinter Scheduled Caching
    condition: eq(variables.isScheduled, true)
    jobs:
      - job: UpdateMegaLinterCache
        displayName: "Update MegaLinter Cache"
        pool:
          name: ai-on-edge-managed-pool
          vmImage: ubuntu-latest
          # Make a demand for the data drive on this agent to ensure
          # we can pull megalinter from the cache
          demands:
            - WorkFolder -equals /mnt/storage/sdc/

        steps:
          # Clear the cache directory ahead of the refresh
          - script: |

              # Clear the cache data directory ahead of the refresh
              echo "Clearing Megalinter Cache Directory... $(MegalinterCachePath)"
              rm -rf $(MegalinterCachePath)
              echo "Creating Megalinter Cache Directory... $(MegalinterCachePath)"
              mkdir -p $(MegalinterCachePath)

            displayName: "Clear Megalinter Cache Directory"

          # Pull MegaLinter docker image
          - script: |
              echo "Pulling MegaLinter Docker image..."
              docker pull oxsecurity/megalinter:v8
            displayName: "Pull MegaLinter"

          # Save MegaLinter docker image to cache
          - script: |
              echo "Saving Megalinter Docker image to cache..."
              docker save oxsecurity/megalinter:v8 -o $(MegalinterCachePath)/megalinterv8-cache.tar
            displayName: "Save MegaLinter Docker Image to Cache"

  - stage: Main
    displayName: Main Build
    # dependsOn: string | [ string ]
    # Run the main build process only if the build is not scheduled and is the main branch
    condition: and(eq(variables.isMain, true), eq(variables.isScheduled, false))
    # pool: string | pool
    # variables: { string: string } | [ variable | variableReference ]
    jobs:
      - job: DependencyScan
        pool:
          name: ai-on-edge-managed-pool
          vmImage: ubuntu-latest
        steps:
          # Checkout repo
          - checkout: self
            clean: true

          # Initialize dependency scan and fail the build if it does not pass
          - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
            displayName: "Component Detection"
            inputs:
              failOnAlert: true

      # Use the megaLinter-template.yml to run MeagaLinter
      # This job will only run if the DependencyScan job passes.
      - template: .azdo/templates/megalinter-template.yml
        parameters:
          dependsOn: DependencyScan
          displayName: "Run MegaLinter"
          condition: succeeded()
          megalinterCachePath: $(MegalinterCachePath)
          # for main do not report results as there's no PR to report to
          enableAzureReporter: false

      # Use the wiki-update-template.yml to update the wiki documentation
      # This job will only run if the MegaLinter job passes.
      - template: .azdo/templates/wiki-update-template.yml
        parameters:
          dependsOn: MegaLinter
          displayName: "Wiki Documentation Update"
          condition: succeeded()
          branchRepoFolder: "branch"
          wikiRepoFolder: "wiki"
          wikiRepo: "git://edge-ai/edge-ai@refs/heads/wiki"
          wikiBranch: "wiki"

  - stage: PR
    displayName: PR Build Process
    # dependsOn: string | [ string ]
    # Run the PR build process only if the build is not scheduled and not the main branch
    condition: and(eq(variables.isMain, false), eq(variables.isScheduled, false))
    # pool: string | pool
    # variables: { string: string } | [ variable | variableReference ]
    jobs:
      # Ensure a clean workspace for the PR build process
      - job: PrePRCleanup
        displayName: Pre-PR Workspace Cleanup
        pool:
          name: ai-on-edge-managed-pool
          vmImage: ubuntu-latest
        steps:
          - task: DeleteFiles@1
            displayName: "Delete files from $(Agent.WorkFolder)"
            inputs:
              SourceFolder: "$(Agent.WorkFolder)"

      # Run Dependency Scan based on the MSFT vss governance build task.
      # A version of this task is also auto injected by corporate policy.
      # It's declared here to make it explicit in the pipeline.
      - job: DependencyScan
        pool:
          name: ai-on-edge-managed-pool
          vmImage: ubuntu-latest
        dependsOn:
          - PrePRCleanup
        steps:
          # Checkout repo
          - checkout: self
            clean: true

          # Initialize dependency scan and fail the build if it does not pass
          - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
            displayName: "Component Detection"
            inputs:
              failOnAlert: true

      # Use the MegaLinter template for PR builds with Azure reporter enabled
      - template: .azdo/templates/megalinter-template.yml
        parameters:
          dependsOn: DependencyScan
          displayName: "Run MegaLinter"
          condition: succeeded()
          megalinterCachePath: $(MegalinterCachePath)
          # for PR builds, enable the Azure reporter to report results
          # to the PR and set the pull request ID and source repo URI
          enableAzureReporter: true
          pullRequestId: $(System.PullRequest.PullRequestId)
          sourceRepoUri: $(System.PullRequest.SourceRepositoryURI)

      # Use the docs check template for PR builds
      - template: .azdo/templates/docs-check-template.yml
        parameters:
          dependsOn: MegaLinter
          displayName: "Documentation Quality Check"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default

      # Use the aio-version-checker-template.yml template for checking AIO component versions
      - template: .azdo/templates/aio-version-checker-template.yml
        parameters:
          dependsOn: MegaLinter
          displayName: "AIO Version Check"
          condition: and( not(failed()), not(canceled()) )
          iacType: all  # Check all supported file types (currently only Terraform and Bicep files)
          breakBuild: false  # Only show warnings by default

      # Use the matrix-folder-check-template.yml to check for changes in src directory
      - template: .azdo/templates/matrix-folder-check-template.yml
        parameters:
          dependsOn: DocsCheck
          displayName: "Check for changes in src directory"
          condition: succeeded()
          includeAllFolders: false  # Only check folders with changes for PR builds

      # Use the resource-provider-tests-template.yml template for Resource Provider testing jobs
      - template: .azdo/templates/resource-provider-tests-template.yml
        parameters:
          dependsOn: MatrixBuildFolderCheck
          shellScriptCondition: eq(dependencies.MatrixBuildFolderCheck.outputs['matrixBuildFolderCheckTask.changesInRpEnablementShell'], 'true')
          pwshScriptCondition: eq(dependencies.MatrixBuildFolderCheck.outputs['matrixBuildFolderCheckTask.changesInRpEnablementPwsh'], 'true')
          azureServiceConnection: azdo-ai-for-edge-iac-for-edge
          workingDirectory: $(System.DefaultWorkingDirectory)/src/000-subscription
          pwshTestResultsOutput: $(System.DefaultWorkingDirectory)/PWSH-TEST-RESULTS.xml

      # Use template for Terraform variable compliance checking
      - template: .azdo/templates/variable-compliance-terraform-template.yml
        parameters:
          dependsOn: MatrixBuildFolderCheck
          displayName: "Check Terraform Variable Consistency"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default

      # Use template for Bicep variable compliance checking
      - template: .azdo/templates/variable-compliance-bicep-template.yml
        parameters:
          dependsOn: MatrixBuildFolderCheck
          displayName: "Check Bicep Variable Consistency"
          condition: succeeded()
          breakBuild: false  # Only show warnings by default

      # Use the cluster-test-terraform-template.yml template for Terraform testing
      - template: .azdo/templates/cluster-test-terraform-template.yml
        parameters:
          dependsOn: MatrixBuildFolderCheck
          displayName: "Terraform Component Test"
          condition: eq(dependencies.MatrixBuildFolderCheck.outputs['matrixBuildFolderCheckTask.changesInTfInstall'], 'true')
          matrixVariable: dependencies.MatrixBuildFolderCheck.outputs['matrixBuildFolderCheckTask.changedTfFolders']
          azureServiceConnection: azdo-ai-for-edge-iac-for-edge
          breakBuild: true
